using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

namespace SoftGLImpl {
    partial class SoftGL {
        private static readonly Dictionary<GLenum, int> pname2valueLength = new() {
            { /*GL_DEPTH_STENCIL_TEXTURE_MODE*/0x90EA, 1 },
            { GL.GL_TEXTURE_BASE_LEVEL, 1 },
            { GL.GL_TEXTURE_COMPARE_FUNC, 1 },
            { GL.GL_TEXTURE_COMPARE_MODE, 1 },
            { GL.GL_TEXTURE_LOD_BIAS, 1 },
            { GL.GL_TEXTURE_MIN_FILTER, 1 },
            { GL.GL_TEXTURE_MAG_FILTER, 1 },
            { GL.GL_TEXTURE_MIN_LOD, 1 },
            { GL.GL_TEXTURE_MAX_LOD, 1 },
            { GL.GL_TEXTURE_MAX_LEVEL, 1 },
            { GL.GL_TEXTURE_SWIZZLE_R, 1 },
            { GL.GL_TEXTURE_SWIZZLE_G, 1 },
            { GL.GL_TEXTURE_SWIZZLE_B, 1 },
            { GL.GL_TEXTURE_SWIZZLE_A, 1 },
            { GL.GL_TEXTURE_WRAP_S, 1 },
            { GL.GL_TEXTURE_WRAP_T, 1 },
            { GL.GL_TEXTURE_WRAP_R, 1 },
            { GL.GL_TEXTURE_BORDER_COLOR, 4 },
            { GL.GL_TEXTURE_SWIZZLE_RGBA, 4 },
        };
        public static unsafe void glTexParameterfv(GLenum target, GLenum pname, GLfloat* param) {
            var context = SoftGL.GetCurrentContextObj();
            if (context == null) { return; }

            if (!Enum.IsDefined(typeof(BindTextureTarget), target)) { context.ErrorCode = (uint)(ErrorCode.InvalidEnum); return; }
            if (!pname2valueLength.TryGetValue(pname, out var length)) { context.ErrorCode = (uint)(ErrorCode.InvalidEnum); return; }
            // TODO: GL_INVALID_ENUM is generated if params should have a defined constant value (based on the value of pname) and does not.
            // TODO: GL_INVALID_ENUM is generated if glTexParameter{if} or glTextureParameter{if} is called for a non-scalar parameter (pname GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA).
            // TODO: GL_INVALID_ENUM is generated if the effective target is either GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY, and pname is any of the sampler states.
            // TODO: GL_INVALID_ENUM is generated if the effective target is GL_TEXTURE_RECTANGLE and either of pnames GL_TEXTURE_WRAP_S or GL_TEXTURE_WRAP_T is set to either GL_MIRROR_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT or GL_REPEAT.
            // TODO: GL_INVALID_ENUM is generated if the effective target is GL_TEXTURE_RECTANGLE and pname GL_TEXTURE_MIN_FILTER is set to a value other than GL_NEAREST or GL_LINEAR (no mipmap filtering is permitted).
            // TODO: GL_INVALID_OPERATION is generated if the effective target is either GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY, and pname GL_TEXTURE_BASE_LEVEL is set to a value other than zero.
            // TODO: GL_INVALID_OPERATION is generated by glTextureParameter if texture is not the name of an existing texture object.
            // TODO: GL_INVALID_OPERATION is generated if the effective target is GL_TEXTURE_RECTANGLE and pname GL_TEXTURE_BASE_LEVEL is set to any value other than zero.
            // TODO:GL_INVALID_VALUE is generated if pname is GL_TEXTURE_BASE_LEVEL or GL_TEXTURE_MAX_LEVEL, and param or params is negative.

            var texture = GetCurrentTexture(context, target);
            var values = new GLfloat[length];
            for (int i = 0; i < length; i++) {
                values[i] = param[i];
            }
            if (texture != null) { texture.SetProperty(pname, values); }
        }
    }
}
