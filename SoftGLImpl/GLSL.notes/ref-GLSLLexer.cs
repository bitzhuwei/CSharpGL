//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  DELL-PC
//  DateTime: 2015/4/12 20:53:59
//  UserName: DELL
//  GPLEX input file <GLSL\GLSLLexer.lex - 2015/4/12 20:53:09>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, noParser, noFiles, minimize
//  Option settings: classes, compressMap, compressNext, embedbuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STANDALONE
#define NOFILES
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;
using ShaderEditor;


namespace Shane {

#define STANDALONE
#define BABEL
#define STACK

    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>

#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

    public enum Tokens {
        EOF = 0, maxParseToken = int.MaxValue
        // must have at least these two, values are almost arbitrary
    }

    public abstract class ScanBase {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState {
            get { return CurrentSc; }
            set { CurrentSc = value; }
        }
    }

    public interface IColorScan {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE

    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
    public sealed partial class Scanner : ScanBase, IColorScan {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal

        protected override int CurrentSc {
            // The current start state is a property
            // to try to avoid the user error of setting
            // scState but forgetting to update the FSA
            // start state "currentStart"
            //
            get { return currentScOrd; }  // i.e. return YY_START;
            set {
                currentScOrd = value;   // i.e. BEGIN(value);
                currentStart = startState[value];
            }
        }
#else  // BABEL
    public sealed partial class Scanner : ScanBase {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL

        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }

        private static int GetMaxParseToken() {
            System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }

        static int parserMax = GetMaxParseToken();

        enum Result { accept, noMatch, contextFound };

        const int maxAccept = 564;
        const int initial = 565;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

        #region user code
        public int nextToken() { return yylex(); }
        public int getPos() { return yypos; }
        public int getLength() { return yyleng; }
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

        #region ScannerTables
        struct Table {
            public int min; public int rng; public int dflt;
            public short[] nxt;
            public Table(int m, int x, int d, short[] n) {
                min = m; rng = x; dflt = d; nxt = n;
            }
        };

        static int[] startState = new int[] { 565, 0 };

        #region CompressedCharacterMap
        //
        // There are 61 equivalence classes
        // There are 2 character sequence regions
        // There are 1 tables, 126 entries
        // There are 1 runs, 0 singletons
        // Decision tree depth is 1
        //
        static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 0, 60, 60, 60, 60, 60, 
/*   '\x10' */ 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
/*   '\x20' */ 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 60, 60, 60, 60, 58, 
/*      '0' */ 46, 26, 23, 24, 25, 47, 48, 49, 50, 51, 60, 60, 60, 60, 60, 60, 
/*      '@' */ 57, 44, 32, 28, 27, 38, 41, 56, 56, 42, 56, 56, 33, 34, 52, 53, 
/*      'P' */ 35, 39, 37, 29, 40, 43, 36, 56, 56, 56, 56, 60, 60, 60, 60, 31, 
/*      '`' */ 60, 14, 16, 15, 10, 2, 7, 18, 12, 6, 45, 17, 8, 19, 5, 13, 
/*      'p' */ 21, 55, 1, 9, 3, 4, 22, 11, 20, 30, 54, 57, 60, 57 };

        static sbyte MapC(int code) { // '\0' <= code <= '\U0010FFFF'
            if (code < 126) // '\0' <= code <= '}'
                return mapC0[code - 0];
            else // '~' <= code <= '\U0010FFFF'
                return (sbyte)60;
        }
        #endregion

        static Table[] NxS = new Table[579] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "r"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 557, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 558, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[   2] */ // Shortest string "e"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 397, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 549, 12,
          12, 412, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 550, 12, 12,
          26, 26, 26, 26}),
/* NxS[   3] */ // Shortest string "t"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 417, 533, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 534, 12, 427, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[   4] */ // Shortest string "u"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 525, 12,
          12, 12, 526, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[   5] */ // Shortest string "n"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 515, 516, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[   6] */ // Shortest string "i"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 503, 12,
          39, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 402,
          26, 26, 26, 26}),
/* NxS[   7] */ // Shortest string "f"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 486, 12, 12, 12, 12, 12,
          12, 487, 12, 12, 12, 12, 488, 489, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[   8] */ // Shortest string "l"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 478, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 479, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[   9] */ // Shortest string "s"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 453, 12, 27, -1, -1, -1, -1, 12, 12, 448, 12, 12, 449,
          12, 12, 12, 12, 450, 12, 12, 451, 12, 12, 12, 12, 452, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  10] */ // Shortest string "d"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 435, 12, 12, 12, 436,
          12, 12, 12, 12, 12, 12, 437, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  11] */ // Shortest string "w"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  12] */ // Shortest string "h"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  13] */ // Shortest string "o"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 434, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  14] */ // Shortest string "a"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 423, 12, 424, 12,
          12, 399, 425, 12, 12, 12, 12, 12, 426, 422, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  15] */ // Shortest string "c"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 408, 409, 12, 12, 12, 12,
          12, 410, 12, 12, 12, 12, 411, 412, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  16] */ // Shortest string "b"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 400, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 401, 12, 12, 12, 12, 12, 12, 12, 12, 402,
          26, 26, 26, 26}),
/* NxS[  17] */ // Shortest string "g"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 62, 12, 12, 12, 12, 12,
          12, 63, 12, 12, 12, 12, 64, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  18] */ // Shortest string "m"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 48,
          12, 12, 12, 12, 12, 12, 49, 50, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  19] */ // Shortest string "p"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 42, 12, 12,
          12, 12, 12, 12, 12, 12, 43, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  20] */ // Shortest string "v"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 23, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 24, 25, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  21] */ // Shortest string "//"
      new Table(0, 1, 21, new short[] {-1}),
/* NxS[  22] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[  23] */ // Shortest string "ve"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 40, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  24] */ // Shortest string "vo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 34, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  25] */ // Shortest string "va"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 29}),
/* NxS[  26] */ // Shortest string "r2"
      new Table(46, 42, -1, new short[] {26, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 26}),
/* NxS[  27] */ // Shortest string "r@"
      new Table(46, 42, -1, new short[] {28, 28, 28, 28, 28, 28,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          28, 28, 28, 28}),
/* NxS[  28] */ // Shortest string "r@2"
      new Table(23, 29, -1, new short[] {28, 28, 28, 28, -1, -1,
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          -1, 28, 28, 28, 28, 28, 28}),
/* NxS[  29] */ // Shortest string "var"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 30, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  30] */ // Shortest string "vary"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 31,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  31] */ // Shortest string "varyi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 32, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  32] */ // Shortest string "varyin"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 33, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  33] */ // Shortest string "const"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  34] */ // Shortest string "vol"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 35, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  35] */ // Shortest string "vola"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 36}),
/* NxS[  36] */ // Shortest string "wh"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 37,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  37] */ // Shortest string "whi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 38, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  38] */ // Shortest string "els"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 39}),
/* NxS[  39] */ // Shortest string "if"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  40] */ // Shortest string "vec"
      new Table(23, 39, 12, new short[] {41, 41, 41, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  41] */ // Shortest string "mat2"
      new Table(46, 42, -1, new short[] {26, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 26}),
/* NxS[  42] */ // Shortest string "pu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 45, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  43] */ // Shortest string "po"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  44] */ // Shortest string "tan"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  45] */ // Shortest string "pub"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 46, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  46] */ // Shortest string "stat"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 47,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  47] */ // Shortest string "stati"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 39, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  48] */ // Shortest string "mi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 44, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 44, 12, 12,
          26, 26, 26, 26}),
/* NxS[  49] */ // Shortest string "mo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  50] */ // Shortest string "ma"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 51, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 44, 12, 12,
          26, 26, 26, 26}),
/* NxS[  51] */ // Shortest string "mat"
      new Table(23, 40, 12, new short[] {41, 41, 41, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 52}),
/* NxS[  52] */ // Shortest string "matr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 53,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  53] */ // Shortest string "matri"
      new Table(20, 42, 12, new short[] {54, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[  54] */ // Shortest string "matrix"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 55,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  55] */ // Shortest string "matrixC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 56, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  56] */ // Shortest string "matrixCo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 57, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  57] */ // Shortest string "matrixCom"
      new Table(21, 41, 12, new short[] {58, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[  58] */ // Shortest string "matrixComp"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 59, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  59] */ // Shortest string "matrixCompM"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 60, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  60] */ // Shortest string "matrixCompMu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 61, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  61] */ // Shortest string "sqr"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 44}),
/* NxS[  62] */ // Shortest string "gr"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 387}),
/* NxS[  63] */ // Shortest string "gl"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 66, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  64] */ // Shortest string "go"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 65}),
/* NxS[  65] */ // Shortest string "got"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 39, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  66] */ // Shortest string "gl_"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 67, 68,
          139, 12, 12, 69, 70, 71, 72, 73, 12, 74, 12, 75, 76, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 77, 78, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  67] */ // Shortest string "gl_D"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 380}),
/* NxS[  68] */ // Shortest string "gl_C"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 374, 12, 12, 12, 12, 177, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  69] */ // Shortest string "gl_B"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 371, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  70] */ // Shortest string "gl_L"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 350,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  71] */ // Shortest string "gl_M"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 226, 12, 12,
          12, 12, 12, 12, 12, 12, 227, 228, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  72] */ // Shortest string "gl_P"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 206, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 207, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  73] */ // Shortest string "gl_V"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 203}),
/* NxS[  74] */ // Shortest string "gl_E"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 202, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  75] */ // Shortest string "gl_T"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 178}),
/* NxS[  76] */ // Shortest string "gl_F"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 104, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 105, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  77] */ // Shortest string "gl_N"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 90, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  78] */ // Shortest string "gl_O"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 79, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  79] */ // Shortest string "gl_Ob"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          80, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  80] */ // Shortest string "gl_Obj"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 81}),
/* NxS[  81] */ // Shortest string "gl_Obje"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 82, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  82] */ // Shortest string "gl_Objec"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 83}),
/* NxS[  83] */ // Shortest string "gl_Eye"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 84, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  84] */ // Shortest string "gl_EyeP"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 85, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  85] */ // Shortest string "gl_EyePl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 86, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  86] */ // Shortest string "gl_EyePla"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 87, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  87] */ // Shortest string "gl_EyePlan"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 88}),
/* NxS[  88] */ // Shortest string "gl_EyePlane"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          89, 12, 12, 12, 12, 12, 12, 12, 89, 12, 89, 89, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  89] */ // Shortest string "gl_Color"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  90] */ // Shortest string "gl_No"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 91}),
/* NxS[  91] */ // Shortest string "gl_Nor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  92] */ // Shortest string "gl_Norm"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 93, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  93] */ // Shortest string "gl_Norma"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 94, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  94] */ // Shortest string "gl_Normal"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          95, 12, 12, 12, 12, 96, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[  95] */ // Shortest string "gl_NormalS"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 101, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  96] */ // Shortest string "gl_NormalM"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 97, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[  97] */ // Shortest string "gl_NormalMa"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 98}),
/* NxS[  98] */ // Shortest string "gl_NormalMat"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 99}),
/* NxS[  99] */ // Shortest string "gl_NormalMatr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 100,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 100] */ // Shortest string "gl_Verte"
      new Table(20, 42, 12, new short[] {89, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 101] */ // Shortest string "gl_NormalSc"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 102, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 102] */ // Shortest string "gl_NormalSca"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 103, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 103] */ // Shortest string "gl_ClipPlan"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 89}),
/* NxS[ 104] */ // Shortest string "gl_Fr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 124, 125, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 105] */ // Shortest string "gl_Fo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 106, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 106] */ // Shortest string "gl_Fog"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 112,
          12, 12, 12, 12, 12, 12, 107, 12, 12, 12, 12, 12, 108, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 107] */ // Shortest string "gl_FogP"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 116, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 108] */ // Shortest string "gl_FogF"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 109}),
/* NxS[ 109] */ // Shortest string "gl_FogFr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 110, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 110] */ // Shortest string "gl_FogFra"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 111, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 111] */ // Shortest string "gl_FogFrag"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 112,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 112] */ // Shortest string "gl_TexC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 113, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 113] */ // Shortest string "gl_TexCo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 114, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 114] */ // Shortest string "gl_TexCoo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 115}),
/* NxS[ 115] */ // Shortest string "gl_TexCoor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 89, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 116] */ // Shortest string "gl_FogPa"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 117}),
/* NxS[ 117] */ // Shortest string "gl_FogPar"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 118, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 118] */ // Shortest string "gl_FogPara"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 119, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 119] */ // Shortest string "gl_FogParam"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 120}),
/* NxS[ 120] */ // Shortest string "gl_FogParame"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 121}),
/* NxS[ 121] */ // Shortest string "gl_FogParamet"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 122}),
/* NxS[ 122] */ // Shortest string "gl_FogParamete"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 123}),
/* NxS[ 123] */ // Shortest string "gl_MaxLight"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 89, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 124] */ // Shortest string "gl_Fro"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 137, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 125] */ // Shortest string "gl_Fra"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 126, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 126] */ // Shortest string "gl_Frag"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 127, 128,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 127] */ // Shortest string "gl_FragD"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 132, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 133, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 128] */ // Shortest string "gl_FragC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 129, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 129] */ // Shortest string "gl_FragCo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 130, 12, 12, 12, 12, 114, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 130] */ // Shortest string "gl_Col"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 131, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 131] */ // Shortest string "gl_Colo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 89}),
/* NxS[ 132] */ // Shortest string "gl_FragDe"
      new Table(21, 41, 12, new short[] {135, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 133] */ // Shortest string "gl_FragDa"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 134}),
/* NxS[ 134] */ // Shortest string "gl_FragDat"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 89, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 135] */ // Shortest string "gl_FragDep"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 136}),
/* NxS[ 136] */ // Shortest string "gl_FragDept"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 89, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 137] */ // Shortest string "gl_Fron"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 138}),
/* NxS[ 138] */ // Shortest string "gl_Front"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 176,
          139, 12, 12, 12, 140, 141, 12, 12, 12, 12, 12, 12, 142, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 139] */ // Shortest string "gl_S"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 168}),
/* NxS[ 140] */ // Shortest string "gl_BackL"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 153,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 141] */ // Shortest string "gl_BackM"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 147, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 142] */ // Shortest string "gl_FrontF"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 143, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 143] */ // Shortest string "gl_FrontFa"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 144, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 144] */ // Shortest string "gl_FrontFac"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 145,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 145] */ // Shortest string "gl_FrontFaci"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 146, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 146] */ // Shortest string "gl_FrontFacin"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 89, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 147] */ // Shortest string "gl_BackMa"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 148}),
/* NxS[ 148] */ // Shortest string "gl_BackMat"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 149}),
/* NxS[ 149] */ // Shortest string "gl_BackMate"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 150}),
/* NxS[ 150] */ // Shortest string "gl_BackMater"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 151,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 151] */ // Shortest string "gl_BackMateri"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 152, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 152] */ // Shortest string "gl_BackMateria"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 89, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 153] */ // Shortest string "gl_BackLi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 154, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 154] */ // Shortest string "gl_BackLig"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 155, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 155] */ // Shortest string "gl_BackLigh"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 156}),
/* NxS[ 156] */ // Shortest string "gl_BackLight"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 157, 158, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 157] */ // Shortest string "gl_BackLightM"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 164, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 158] */ // Shortest string "gl_BackLightP"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 159}),
/* NxS[ 159] */ // Shortest string "gl_BackLightPr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 160, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 160] */ // Shortest string "gl_BackLightPro"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 161, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 161] */ // Shortest string "gl_BackLightProd"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 162, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 162] */ // Shortest string "gl_BackLightProdu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 163, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 163] */ // Shortest string "gl_BackLightProduc"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 89}),
/* NxS[ 164] */ // Shortest string "gl_BackLightMo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 165, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 165] */ // Shortest string "gl_BackLightMod"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 166}),
/* NxS[ 166] */ // Shortest string "gl_BackLightMode"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 167, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 167] */ // Shortest string "gl_BackLightModel"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 158, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 168] */ // Shortest string "gl_Se"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 169, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 169] */ // Shortest string "gl_Sec"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 170, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 170] */ // Shortest string "gl_Seco"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 171, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 171] */ // Shortest string "gl_Secon"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 172, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 172] */ // Shortest string "gl_Second"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 173, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 173] */ // Shortest string "gl_Seconda"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 174}),
/* NxS[ 174] */ // Shortest string "gl_Secondar"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 175, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 175] */ // Shortest string "gl_Secondary"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 176,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 176] */ // Shortest string "gl_BackC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 177, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 177] */ // Shortest string "gl_Co"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 130, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 178] */ // Shortest string "gl_Te"
      new Table(20, 42, 12, new short[] {179, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 179] */ // Shortest string "gl_Tex"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 112,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 180}),
/* NxS[ 180] */ // Shortest string "gl_Text"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 181, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 181] */ // Shortest string "gl_Textu"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 182}),
/* NxS[ 182] */ // Shortest string "gl_Textur"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 183}),
/* NxS[ 183] */ // Shortest string "gl_Texture"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 96, 12, 12, 12, 184, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 184] */ // Shortest string "gl_TextureE"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 185, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 185] */ // Shortest string "gl_TextureEn"
      new Table(22, 40, 12, new short[] {175, 26, 26, 26, 26, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1,
          -1, -1}),
/* NxS[ 186] */ // Shortest string ""
      new Table(20, 42, 12, new short[] {187, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 187] */ // Shortest string ""
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 195, 12, 188, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 188] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 189, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 189] */ // Shortest string ""
      new Table(22, 40, 12, new short[] {190, 26, 26, 26, 26, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1,
          -1, -1}),
/* NxS[ 190] */ // Shortest string ""
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 191}),
/* NxS[ 191] */ // Shortest string ""
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 192}),
/* NxS[ 192] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 193, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 193] */ // Shortest string ""
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 194}),
/* NxS[ 194] */ // Shortest string ""
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 195, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 195] */ // Shortest string ""
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 196}),
/* NxS[ 196] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 197, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 197] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 198, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 198] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 199, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 199] */ // Shortest string ""
      new Table(21, 41, 12, new short[] {200, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 200] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 201, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 201] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 103, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 202] */ // Shortest string "gl_Ey"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 83}),
/* NxS[ 203] */ // Shortest string "gl_Ve"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 204}),
/* NxS[ 204] */ // Shortest string "gl_Ver"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 205}),
/* NxS[ 205] */ // Shortest string "gl_Vert"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 100}),
/* NxS[ 206] */ // Shortest string "gl_Pr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 218, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 207] */ // Shortest string "gl_Po"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 208,
          12, 12, 209, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 208] */ // Shortest string "gl_Poi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 214, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 209] */ // Shortest string "gl_Pos"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 210,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 210] */ // Shortest string "gl_Posi"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 211}),
/* NxS[ 211] */ // Shortest string "gl_Posit"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 212,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 212] */ // Shortest string "gl_Positi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 213, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 213] */ // Shortest string "gl_Positio"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 89, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 214] */ // Shortest string "gl_Poin"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 215}),
/* NxS[ 215] */ // Shortest string "gl_Point"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          216, 12, 12, 12, 12, 12, 107, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 216] */ // Shortest string "gl_PointS"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 217,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 217] */ // Shortest string "gl_PointSi"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 103, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 218] */ // Shortest string "gl_Pro"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          219, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 219] */ // Shortest string "gl_Proj"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 220}),
/* NxS[ 220] */ // Shortest string "gl_Proje"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 221, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 221] */ // Shortest string "gl_Projec"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 222}),
/* NxS[ 222] */ // Shortest string "gl_Project"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 223,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 223] */ // Shortest string "gl_Projecti"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 224, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 224] */ // Shortest string "gl_Projectio"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 225, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 225] */ // Shortest string "gl_Projection"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 96, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 226] */ // Shortest string "gl_Mu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 337, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 227] */ // Shortest string "gl_Mo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 329, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 228] */ // Shortest string "gl_Ma"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 229, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 230, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 229] */ // Shortest string "gl_Mat"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 324}),
/* NxS[ 230] */ // Shortest string "gl_Max"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 231, 232,
          12, 12, 12, 12, 233, 12, 12, 234, 12, 12, 12, 235, 236, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 231] */ // Shortest string "gl_MaxD"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 318}),
/* NxS[ 232] */ // Shortest string "gl_MaxC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 304, 12, 12, 12, 12, 305, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 233] */ // Shortest string "gl_MaxL"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 302,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 234] */ // Shortest string "gl_MaxV"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 276, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 277, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 235] */ // Shortest string "gl_MaxT"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 259}),
/* NxS[ 236] */ // Shortest string "gl_MaxF"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 237}),
/* NxS[ 237] */ // Shortest string "gl_MaxFr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 238, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 238] */ // Shortest string "gl_MaxFra"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 239, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 239] */ // Shortest string "gl_MaxFrag"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 240, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 240] */ // Shortest string "gl_MaxFragm"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 241}),
/* NxS[ 241] */ // Shortest string "gl_MaxFragme"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 242, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 242] */ // Shortest string "gl_MaxFragmen"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 243}),
/* NxS[ 243] */ // Shortest string "gl_MaxFragment"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 244, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 244] */ // Shortest string "gl_MaxVertexU"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 245, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 245] */ // Shortest string "gl_MaxVertexUn"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 246,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 246] */ // Shortest string "gl_MaxVertexUni"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          247, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 247] */ // Shortest string "gl_MaxVertexUnif"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 248, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 248] */ // Shortest string "gl_MaxVertexUnifo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 249}),
/* NxS[ 249] */ // Shortest string "gl_MaxVertexUnifor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 250, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 250] */ // Shortest string "gl_MaxVertexUniform"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 251,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 251] */ // Shortest string "gl_MaxVertexUniformC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 252, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 252] */ // Shortest string "gl_MaxVertexUniformCo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 253, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 253] */ // Shortest string "gl_MaxVertexUniformCom"
      new Table(21, 41, 12, new short[] {254, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 254] */ // Shortest string "gl_MaxVertexUniformComp"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 255, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 255] */ // Shortest string "gl_MaxVertexUniformCompo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 256, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 256] */ // Shortest string "gl_MaxVertexUniformCompon"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 257}),
/* NxS[ 257] */ // Shortest string "gl_MaxVertexUniformCompone"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 258, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 258] */ // Shortest string "gl_MaxLigh"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 123}),
/* NxS[ 259] */ // Shortest string "gl_MaxTe"
      new Table(20, 42, 12, new short[] {260, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 260] */ // Shortest string "gl_MaxTex"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 261}),
/* NxS[ 261] */ // Shortest string "gl_MaxText"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 262, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 262] */ // Shortest string "gl_MaxTextu"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 263}),
/* NxS[ 263] */ // Shortest string "gl_MaxTextur"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 264}),
/* NxS[ 264] */ // Shortest string "gl_MaxTexture"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 265,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 266, 267, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 265] */ // Shortest string "gl_MaxTextureC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 273, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 266] */ // Shortest string "gl_MaxTextureI"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 269, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 267] */ // Shortest string "gl_MaxTextureU"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 268, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 268] */ // Shortest string "gl_MaxTextureUn"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 258,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 269] */ // Shortest string "gl_MaxTextureIm"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 270, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 270] */ // Shortest string "gl_MaxTextureIma"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 271, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 271] */ // Shortest string "gl_MaxTextureImag"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 272}),
/* NxS[ 272] */ // Shortest string "gl_MaxTextureImage"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 267, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 273] */ // Shortest string "gl_MaxTextureCo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 274, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 274] */ // Shortest string "gl_MaxTextureCoo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 275}),
/* NxS[ 275] */ // Shortest string "gl_MaxTextureCoor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 123, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 276] */ // Shortest string "gl_MaxVe"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 286}),
/* NxS[ 277] */ // Shortest string "gl_MaxVa"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 278}),
/* NxS[ 278] */ // Shortest string "gl_MaxVar"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 279, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 279] */ // Shortest string "gl_MaxVary"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 280,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 280] */ // Shortest string "gl_MaxVaryi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 281, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 281] */ // Shortest string "gl_MaxVaryin"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 282, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 282] */ // Shortest string "gl_MaxVarying"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 283, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 283] */ // Shortest string "gl_MaxVaryingF"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 284, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 284] */ // Shortest string "gl_MaxVaryingFl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 285, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 285] */ // Shortest string "gl_MaxVaryingFlo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 258, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 286] */ // Shortest string "gl_MaxVer"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 287}),
/* NxS[ 287] */ // Shortest string "gl_MaxVert"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 288}),
/* NxS[ 288] */ // Shortest string "gl_MaxVerte"
      new Table(20, 42, 12, new short[] {289, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 289] */ // Shortest string "gl_MaxVertex"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 290, 12, 12, 244, 291,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 290] */ // Shortest string "gl_MaxVertexT"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 296}),
/* NxS[ 291] */ // Shortest string "gl_MaxVertexA"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 292}),
/* NxS[ 292] */ // Shortest string "gl_MaxVertexAt"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 293}),
/* NxS[ 293] */ // Shortest string "gl_MaxVertexAtt"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 294}),
/* NxS[ 294] */ // Shortest string "gl_MaxVertexAttr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 295,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 295] */ // Shortest string "gl_MaxVertexAttri"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 123, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 296] */ // Shortest string "gl_MaxVertexTe"
      new Table(20, 42, 12, new short[] {297, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 297] */ // Shortest string "gl_MaxVertexTex"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 298}),
/* NxS[ 298] */ // Shortest string "gl_MaxVertexText"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 299, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 299] */ // Shortest string "gl_MaxVertexTextu"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 300}),
/* NxS[ 300] */ // Shortest string "gl_MaxVertexTextur"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 301}),
/* NxS[ 301] */ // Shortest string "gl_MaxVertexTexture"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 266, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 302] */ // Shortest string "gl_MaxLi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 303, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 303] */ // Shortest string "gl_MaxLig"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 258, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 304] */ // Shortest string "gl_MaxCl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 312,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 305] */ // Shortest string "gl_MaxCo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 306, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 306] */ // Shortest string "gl_MaxCom"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 307, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 307] */ // Shortest string "gl_MaxComb"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 308,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 308] */ // Shortest string "gl_MaxCombi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 309, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 309] */ // Shortest string "gl_MaxCombin"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 310}),
/* NxS[ 310] */ // Shortest string "gl_MaxCombine"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 311, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 311] */ // Shortest string "gl_MaxCombined"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 290, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 312] */ // Shortest string "gl_MaxCli"
      new Table(21, 41, 12, new short[] {313, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 313] */ // Shortest string "gl_MaxClip"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 314, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 314] */ // Shortest string "gl_MaxClipP"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 315, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 315] */ // Shortest string "gl_MaxClipPl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 316, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 316] */ // Shortest string "gl_MaxClipPla"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 317, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 317] */ // Shortest string "gl_MaxClipPlan"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 123}),
/* NxS[ 318] */ // Shortest string "gl_MaxDr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 319, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 319] */ // Shortest string "gl_MaxDra"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 320, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 320] */ // Shortest string "gl_MaxDraw"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 321, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 321] */ // Shortest string "gl_MaxDrawB"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 322, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 322] */ // Shortest string "gl_MaxDrawBu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          323, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 323] */ // Shortest string "gl_MaxDrawBuf"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          121, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 324] */ // Shortest string "gl_Mate"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 325}),
/* NxS[ 325] */ // Shortest string "gl_Mater"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 326,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 326] */ // Shortest string "gl_Materi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 327, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 327] */ // Shortest string "gl_Materia"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 328, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 328] */ // Shortest string "gl_Material"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 107, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 329] */ // Shortest string "gl_Mod"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 330}),
/* NxS[ 330] */ // Shortest string "gl_Mode"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 331, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 331] */ // Shortest string "gl_Model"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 332, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 332] */ // Shortest string "gl_ModelV"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 333,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 333] */ // Shortest string "gl_ModelVi"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 334}),
/* NxS[ 334] */ // Shortest string "gl_ModelVie"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 335, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 335] */ // Shortest string "gl_ModelView"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 96, 336, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 336] */ // Shortest string "gl_ModelViewP"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 206}),
/* NxS[ 337] */ // Shortest string "gl_Mul"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 338}),
/* NxS[ 338] */ // Shortest string "gl_Mult"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 339,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 339] */ // Shortest string "gl_Multi"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 340, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 340] */ // Shortest string "gl_MultiT"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 341}),
/* NxS[ 341] */ // Shortest string "gl_MultiTe"
      new Table(20, 42, 12, new short[] {342, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 342] */ // Shortest string "gl_MultiTex"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 343,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 343] */ // Shortest string "gl_MultiTexC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 344, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 344] */ // Shortest string "gl_MultiTexCo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 345, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 345] */ // Shortest string "gl_MultiTexCoo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 346}),
/* NxS[ 346] */ // Shortest string "gl_MultiTexCoor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 347, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 347] */ // Shortest string "gl_MultiTexCoord"
      new Table(23, 39, 12, new short[] {348, 348, 348, 349, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 348, 348, 348, 348, 348, 348, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 348] */ // Shortest string "gl_MultiTexCoord2"
      new Table(46, 42, -1, new short[] {26, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 26}),
/* NxS[ 349] */ // Shortest string "gl_MultiTexCoord1"
      new Table(46, 42, -1, new short[] {348, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 348}),
/* NxS[ 350] */ // Shortest string "gl_Li"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 351, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 351] */ // Shortest string "gl_Lig"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 352, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 352] */ // Shortest string "gl_Ligh"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 353}),
/* NxS[ 353] */ // Shortest string "gl_Light"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          354, 12, 12, 12, 12, 355, 356, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 354] */ // Shortest string "gl_LightS"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 366, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 355] */ // Shortest string "gl_LightM"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 361, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 356] */ // Shortest string "gl_LightP"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 357}),
/* NxS[ 357] */ // Shortest string "gl_LightPr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 358, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 358] */ // Shortest string "gl_LightPro"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 359, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 359] */ // Shortest string "gl_LightProd"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 360, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 360] */ // Shortest string "gl_LightProdu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 258, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 361] */ // Shortest string "gl_LightMo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 362, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 362] */ // Shortest string "gl_LightMod"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 363}),
/* NxS[ 363] */ // Shortest string "gl_LightMode"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 364, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 364] */ // Shortest string "gl_LightModel"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 365, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 365] */ // Shortest string "gl_LightModelP"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 357, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 116, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 366] */ // Shortest string "gl_LightSo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 367, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 367] */ // Shortest string "gl_LightSou"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 368}),
/* NxS[ 368] */ // Shortest string "gl_LightSour"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 369, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 369] */ // Shortest string "gl_DepthRang"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 370}),
/* NxS[ 370] */ // Shortest string "gl_DepthRange"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 107, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 371] */ // Shortest string "gl_Ba"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 372, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 372] */ // Shortest string "gl_Bac"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 373, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 373] */ // Shortest string "gl_Back"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 176,
          139, 12, 12, 12, 140, 141, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 374] */ // Shortest string "gl_Cl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 375,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 375] */ // Shortest string "gl_Cli"
      new Table(21, 41, 12, new short[] {376, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 376] */ // Shortest string "gl_Clip"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 377, 73, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 377] */ // Shortest string "gl_ClipP"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 378, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 378] */ // Shortest string "gl_ClipPl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 379, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 379] */ // Shortest string "gl_ClipPla"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 103, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 380] */ // Shortest string "gl_De"
      new Table(21, 41, 12, new short[] {381, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 381] */ // Shortest string "gl_Dep"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 382}),
/* NxS[ 382] */ // Shortest string "gl_Dept"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 383, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 383] */ // Shortest string "gl_Depth"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 384, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 384] */ // Shortest string "gl_DepthR"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 385, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 385] */ // Shortest string "gl_DepthRa"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 386, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 386] */ // Shortest string "gl_DepthRan"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 369, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 387] */ // Shortest string "gre"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 388, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 388] */ // Shortest string "grea"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 389}),
/* NxS[ 389] */ // Shortest string "great"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 390}),
/* NxS[ 390] */ // Shortest string "greate"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 391}),
/* NxS[ 391] */ // Shortest string "less"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 392, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 392] */ // Shortest string "lessT"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 393, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 393] */ // Shortest string "lessTh"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 394, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 394] */ // Shortest string "lessTha"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 395, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 395] */ // Shortest string "not"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 396, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 396] */ // Shortest string "notE"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 397, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 397] */ // Shortest string "eq"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 398, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 398] */ // Shortest string "equ"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 399, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 399] */ // Shortest string "al"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 400] */ // Shortest string "br"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 406}),
/* NxS[ 401] */ // Shortest string "bo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 405, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 402] */ // Shortest string "iv"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 403}),
/* NxS[ 403] */ // Shortest string "ive"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 404, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 404] */ // Shortest string "ivec"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 405] */ // Shortest string "boo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 404, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 406] */ // Shortest string "bre"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 407, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 407] */ // Shortest string "brea"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 39, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 408] */ // Shortest string "cr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 421, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 409] */ // Shortest string "ce"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 399,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 410] */ // Shortest string "cl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 418, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 411] */ // Shortest string "co"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 413, 12,
          12, 12, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 412] */ // Shortest string "el"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 38, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 413] */ // Shortest string "con"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 414, 12, 12, 12,
          12, 12, 415, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 414] */ // Shortest string "cont"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 416,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 415] */ // Shortest string "cons"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 33}),
/* NxS[ 416] */ // Shortest string "conti"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 417, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 417] */ // Shortest string "tr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 38, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 418] */ // Shortest string "cla"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 419, 12, 12, 12, 12, 12, 12, 12, 12, 12, 420, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 419] */ // Shortest string "thi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 39, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 420] */ // Shortest string "ste"
      new Table(21, 41, 12, new short[] {44, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 421] */ // Shortest string "cro"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 422, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 422] */ // Shortest string "ab"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 423] */ // Shortest string "at"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 428, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 427, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 424] */ // Shortest string "an"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 425] */ // Shortest string "as"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 427,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 426] */ // Shortest string "ac"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 422, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 427] */ // Shortest string "ta"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 44, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 428] */ // Shortest string "att"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 429}),
/* NxS[ 429] */ // Shortest string "attr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 430,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 430] */ // Shortest string "attri"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 431, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 431] */ // Shortest string "attrib"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 432, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 432] */ // Shortest string "attribu"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 433}),
/* NxS[ 433] */ // Shortest string "attribut"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 33}),
/* NxS[ 434] */ // Shortest string "ou"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 39}),
/* NxS[ 435] */ // Shortest string "de"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          443, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 444, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 436] */ // Shortest string "di"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 438, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 437] */ // Shortest string "do"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 44}),
/* NxS[ 438] */ // Shortest string "dis"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 439}),
/* NxS[ 439] */ // Shortest string "dist"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 440, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 440] */ // Shortest string "dista"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 441, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 441] */ // Shortest string "distan"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 442, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 442] */ // Shortest string "distanc"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 44}),
/* NxS[ 443] */ // Shortest string "def"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 446, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 444] */ // Shortest string "deg"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 445}),
/* NxS[ 445] */ // Shortest string "degr"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 421}),
/* NxS[ 446] */ // Shortest string "defa"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 447, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 447] */ // Shortest string "defau"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 434, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 448] */ // Shortest string "st"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 475, 420, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 476, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 449] */ // Shortest string "si"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 44, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 427, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 450] */ // Shortest string "sw"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 472,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 451] */ // Shortest string "sa"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 460, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 452] */ // Shortest string "sm"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 454, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 453] */ // Shortest string "sq"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 61}),
/* NxS[ 454] */ // Shortest string "smo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 455, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 455] */ // Shortest string "smoo"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 456}),
/* NxS[ 456] */ // Shortest string "smoot"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 457, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 457] */ // Shortest string "smooth"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 458, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 458] */ // Shortest string "smooths"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 459}),
/* NxS[ 459] */ // Shortest string "smoothst"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 420}),
/* NxS[ 460] */ // Shortest string "sam"
      new Table(21, 41, 12, new short[] {461, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 461] */ // Shortest string "samp"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 462, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 462] */ // Shortest string "sampl"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 463}),
/* NxS[ 463] */ // Shortest string "sample"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 464}),
/* NxS[ 464] */ // Shortest string "sampler"
      new Table(23, 39, 12, new short[] {466, 465, 26, 466, 12, 467,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 465] */ // Shortest string "sampler3"
      new Table(46, 43, -1, new short[] {26, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 26, 471}),
/* NxS[ 466] */ // Shortest string "sampler2"
      new Table(46, 43, -1, new short[] {26, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 26, 470}),
/* NxS[ 467] */ // Shortest string "samplerC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 468, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 468] */ // Shortest string "samplerCu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 469, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 469] */ // Shortest string "samplerCub"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 404}),
/* NxS[ 470] */ // Shortest string "sampler2D"
      new Table(29, 1, -1, new short[] {569}),
/* NxS[ 471] */ new Table(0, 0, -1, null), // Shortest string "sampler3D"
/* NxS[ 472] */ // Shortest string "swi"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 473}),
/* NxS[ 473] */ // Shortest string "swit"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 474, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 474] */ // Shortest string "switc"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 39, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 475] */ // Shortest string "str"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 477, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 476] */ // Shortest string "sta"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 46}),
/* NxS[ 477] */ // Shortest string "stru"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 434, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 478] */ // Shortest string "le"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 482, 12,
          12, 12, 483, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 479] */ // Shortest string "lo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 480, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 480] */ // Shortest string "exp"
      new Table(23, 39, 12, new short[] {481, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 481] */ // Shortest string "exp2"
      new Table(46, 42, -1, new short[] {26, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 26}),
/* NxS[ 482] */ // Shortest string "len"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 484, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 483] */ // Shortest string "les"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 391, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 484] */ // Shortest string "leng"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 485}),
/* NxS[ 485] */ // Shortest string "lengt"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 486] */ // Shortest string "fr"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 502, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 487] */ // Shortest string "fl"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 499, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 488] */ // Shortest string "fo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 497}),
/* NxS[ 489] */ // Shortest string "fa"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 412, 12, 12, 12, 12, 12, 12, 490, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 490] */ // Shortest string "fac"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 491}),
/* NxS[ 491] */ // Shortest string "face"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          492, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 492] */ // Shortest string "facef"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 493, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 493] */ // Shortest string "facefo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 494}),
/* NxS[ 494] */ // Shortest string "facefor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 495, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 495] */ // Shortest string "faceforw"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 496, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 496] */ // Shortest string "faceforwa"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 49}),
/* NxS[ 497] */ // Shortest string "for"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 498}),
/* NxS[ 498] */ // Shortest string "fore"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 473, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 499] */ // Shortest string "flo"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 500, 501, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 500] */ // Shortest string "floo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 44}),
/* NxS[ 501] */ // Shortest string "floa"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 404}),
/* NxS[ 502] */ // Shortest string "fra"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 61, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 503] */ // Shortest string "in"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 504, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 505,
          26, 26, 26, 26}),
/* NxS[ 504] */ // Shortest string "int"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 511}),
/* NxS[ 505] */ // Shortest string "inv"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 506}),
/* NxS[ 506] */ // Shortest string "inve"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 507}),
/* NxS[ 507] */ // Shortest string "inver"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 508, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 508] */ // Shortest string "invers"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 509}),
/* NxS[ 509] */ // Shortest string "inverse"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 510, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 510] */ // Shortest string "inverses"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 453, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 511] */ // Shortest string "inte"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 512}),
/* NxS[ 512] */ // Shortest string "inter"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          513, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 513] */ // Shortest string "namesp"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 514, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 514] */ // Shortest string "namespa"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 38, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 515] */ // Shortest string "no"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 520, 12, 395}),
/* NxS[ 516] */ // Shortest string "na"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 517, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 517] */ // Shortest string "nam"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 518}),
/* NxS[ 518] */ // Shortest string "name"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 519, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 519] */ // Shortest string "names"
      new Table(21, 41, 12, new short[] {513, 12, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1,
          -1, -1, -1}),
/* NxS[ 520] */ // Shortest string "nor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 521, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 521] */ // Shortest string "norm"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 522, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 522] */ // Shortest string "norma"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 523, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 523] */ // Shortest string "normal"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 524,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 524] */ // Shortest string "normali"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 442, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 525] */ // Shortest string "un"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 529,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 526] */ // Shortest string "us"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 527,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 527] */ // Shortest string "usi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 528, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 528] */ // Shortest string "usin"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 39, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 529] */ // Shortest string "uni"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          530, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 530] */ // Shortest string "unif"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 531, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 531] */ // Shortest string "unifo"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 532}),
/* NxS[ 532] */ // Shortest string "unifor"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 33, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 533] */ // Shortest string "te"
      new Table(20, 42, 12, new short[] {535, 12, 12, 26, 26, 26,
          26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27,
          -1, -1, -1, -1}),
/* NxS[ 534] */ // Shortest string "th"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 419,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 535] */ // Shortest string "tex"
      new Table(23, 42, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 12, 536}),
/* NxS[ 536] */ // Shortest string "text"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 537, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 537] */ // Shortest string "textu"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 538}),
/* NxS[ 538] */ // Shortest string "textur"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 539}),
/* NxS[ 539] */ // Shortest string "texture"
      new Table(23, 39, 12, new short[] {540, 26, 26, 26, 12, 541,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 540] */ // Shortest string "texture2"
      new Table(46, 43, -1, new short[] {26, 26, 26, 26, 26, 26,
          -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, 27, -1, 27, 27,
          -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, -1, -1, -1, -1,
          26, 26, 26, 26, 546}),
/* NxS[ 541] */ // Shortest string "textureC"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 542, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 542] */ // Shortest string "textureCu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 543, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 543] */ // Shortest string "textureCub"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 544}),
/* NxS[ 544] */ // Shortest string "textureCube"
      new Table(23, 39, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 545, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1}),
/* NxS[ 545] */ // Shortest string "textureCubeL"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 49, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 546] */ // Shortest string "texture2D"
      new Table(33, 3, -1, new short[] {577, -1, 574}),
/* NxS[ 547] */ // Shortest string "texture2DProj"
      new Table(33, 1, -1, new short[] {577}),
/* NxS[ 548] */ new Table(0, 0, -1, null), // Shortest string "texture2DLod"
/* NxS[ 549] */ // Shortest string "en"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 554, 12, 12,
          12, 12, 12, 555, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 550] */ // Shortest string "ex"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 551, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 480, 12,
          26, 26, 26, 26}),
/* NxS[ 551] */ // Shortest string "ext"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 552}),
/* NxS[ 552] */ // Shortest string "retu"
      new Table(23, 40, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 553}),
/* NxS[ 553] */ // Shortest string "retur"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 39, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 554] */ // Shortest string "enu"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 39, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 555] */ // Shortest string "end"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 556,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 556] */ // Shortest string "endi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          39, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 557] */ // Shortest string "re"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 562, 12, 12, 12,
          563, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 558] */ // Shortest string "ra"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 559, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 559] */ // Shortest string "rad"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 560,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 560] */ // Shortest string "radi"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 561, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 561] */ // Shortest string "radia"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 422, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 562] */ // Shortest string "ret"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 552, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 563] */ // Shortest string "ref"
      new Table(46, 42, 12, new short[] {26, 26, 26, 26, 26, 26,
          12, 12, 12, 12, 12, 27, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
          12, 564, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          26, 26, 26, 26}),
/* NxS[ 564] */ // Shortest string "refl"
      new Table(23, 41, 12, new short[] {26, 26, 26, 26, 12, 12,
          12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
          12, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 27, -1, -1, -1,
          -1, 12, 502}),
/* NxS[ 565] */ // Shortest string ""
      new Table(46, 42, 12, new short[] {-1, -1, -1, -1, -1, -1,
          12, 12, 12, 12, 12, -1, 566, -1, -1, -1, 1, 2, 3, 4, 5, 6,
          7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 12, 17, 18, 12, 19, 20,
          -1, -1, -1, -1}),
/* NxS[ 566] */ // Shortest string "/"
      new Table(58, 2, -1, new short[] {21, 567}),
/* NxS[ 567] */ // Shortest string "/*"
      new Table(59, 1, 567, new short[] {568}),
/* NxS[ 568] */ // Shortest string "/**"
      new Table(58, 2, 567, new short[] {22, 568}),
/* NxS[ 569] */ // Shortest string "sampler2DS"
      new Table(12, 1, -1, new short[] {570}),
/* NxS[ 570] */ // Shortest string "sampler2DSh"
      new Table(14, 1, -1, new short[] {571}),
/* NxS[ 571] */ // Shortest string "sampler2DSha"
      new Table(10, 1, -1, new short[] {572}),
/* NxS[ 572] */ // Shortest string "sampler2DShad"
      new Table(13, 1, -1, new short[] {573}),
/* NxS[ 573] */ // Shortest string "sampler2DShado"
      new Table(11, 1, -1, new short[] {471}),
/* NxS[ 574] */ // Shortest string "texture2DP"
      new Table(1, 1, -1, new short[] {575}),
/* NxS[ 575] */ // Shortest string "texture2DPr"
      new Table(13, 1, -1, new short[] {576}),
/* NxS[ 576] */ // Shortest string "texture2DPro"
      new Table(45, 1, -1, new short[] {547}),
/* NxS[ 577] */ // Shortest string "texture2DL"
      new Table(13, 1, -1, new short[] {578}),
/* NxS[ 578] */ // Shortest string "texture2DLo"
      new Table(10, 1, -1, new short[] {548}),
    };

        int NextState() {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                unchecked {
                    int rslt;
                    int idx = MapC(code) - NxS[state].min;
                    if (idx < 0) idx += 61;
                    if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
                    else rslt = NxS[state].nxt[idx];
                    return rslt;
                }
        }

        #endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }

        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

        struct BufferContext {
            internal ScanBuff buffSv;
            internal int chrSv;
            internal int cColSv;
            internal int lNumSv;
        }

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx() {
            BufferContext rslt;
            rslt.buffSv = this.buffer;
            rslt.chrSv = this.code;
            rslt.cColSv = this.cCol;
            rslt.lNumSv = this.lNum;
            return rslt;
        }

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value) {
            this.buffer = value.buffSv;
            this.code = value.chrSv;
            this.cCol = value.cColSv;
            this.lNum = value.lNumSv;
        }
        // =================== End Nested classes =======================

        //#if !NOFILES
#if NOFILES
        public Scanner(Stream file) {
            SetSource(file, -1); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }
#endif // !NOFILES

        public Scanner() { }

        private int readPos;

        void GetCode() {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            {
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile) {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF) {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken() {
            //#if (!PERSIST)
#if (PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }

        void MarkEnd() {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek() {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset) {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source) {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if NOFILES
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source) {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage) {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES

        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end) {
            Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
            next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex() {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext {
            get {
                if (tokTxt == null)
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n) {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1;
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }

        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }

        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }

        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set {
                currentScOrd = value;
                currentStart = startState[value];
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
            for (; ; ) {
                int next;              // next state to enter
#if LEFTANCHORS
                for (; ; ) {
                    // Discard characters that do not start any pattern.
                    // Must check the left anchor condition after *every* GetCode!
                    state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                    if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                    GetCode();
                }

#else // !LEFTANCHORS
                state = currentStart;
                while ((next = NextState()) == goStart) {
                    // At this point, the current character has no
                    // transition from the current state.  We discard 
                    // the "no-match" char.   In traditional LEX such 
                    // characters are echoed to the console.
                    GetCode();
                }
#endif // LEFTANCHORS                    
                // At last, a valid transition ...    
                MarkToken();
                state = next;
                GetCode();
#if BACKUP
                bool contextSaved = false;
                while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                    if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                                                                  // Store data for the *latest* accept state that was found.
                        SaveStateAndPos(ref ctx);
                        contextSaved = true;
                    }
                    state = next;
                    GetCode();
                }
                if (state > maxAccept && contextSaved)
                    RestoreStateAndPos(ref ctx);
#else  // BACKUP
                while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                    state = next;
                    GetCode();
                }
#endif // BACKUP
                if (state <= maxAccept) {
                    MarkEnd();
                    #region ActionSwitch
#pragma warning disable 162, 1522
                    switch (state) {
                    case eofNum:
                    if (yywrap())
                        return (int)Tokens.EOF;
                    break;
                    case 1: // Recognized '{identifier}',	Shortest string "r"
                    case 2: // Recognized '{identifier}',	Shortest string "e"
                    case 3: // Recognized '{identifier}',	Shortest string "t"
                    case 4: // Recognized '{identifier}',	Shortest string "u"
                    case 5: // Recognized '{identifier}',	Shortest string "n"
                    case 6: // Recognized '{identifier}',	Shortest string "i"
                    case 7: // Recognized '{identifier}',	Shortest string "f"
                    case 8: // Recognized '{identifier}',	Shortest string "l"
                    case 9: // Recognized '{identifier}',	Shortest string "s"
                    case 10: // Recognized '{identifier}',	Shortest string "d"
                    case 11: // Recognized '{identifier}',	Shortest string "w"
                    case 12: // Recognized '{identifier}',	Shortest string "h"
                    case 13: // Recognized '{identifier}',	Shortest string "o"
                    case 14: // Recognized '{identifier}',	Shortest string "a"
                    case 15: // Recognized '{identifier}',	Shortest string "c"
                    case 16: // Recognized '{identifier}',	Shortest string "b"
                    case 17: // Recognized '{identifier}',	Shortest string "g"
                    case 18: // Recognized '{identifier}',	Shortest string "m"
                    case 19: // Recognized '{identifier}',	Shortest string "p"
                    case 20: // Recognized '{identifier}',	Shortest string "v"
                    case 23: // Recognized '{identifier}',	Shortest string "ve"
                    case 24: // Recognized '{identifier}',	Shortest string "vo"
                    case 25: // Recognized '{identifier}',	Shortest string "va"
                    case 26: // Recognized '{identifier}',	Shortest string "r2"
                    case 27: // Recognized '{identifier}',	Shortest string "r@"
                    case 28: // Recognized '{identifier}',	Shortest string "r@2"
                    case 29: // Recognized '{identifier}',	Shortest string "var"
                    case 30: // Recognized '{identifier}',	Shortest string "vary"
                    case 31: // Recognized '{identifier}',	Shortest string "varyi"
                    case 32: // Recognized '{identifier}',	Shortest string "varyin"
                    case 34: // Recognized '{identifier}',	Shortest string "vol"
                    case 35: // Recognized '{identifier}',	Shortest string "vola"
                    case 36: // Recognized '{identifier}',	Shortest string "wh"
                    case 37: // Recognized '{identifier}',	Shortest string "whi"
                    case 38: // Recognized '{identifier}',	Shortest string "els"
                    case 42: // Recognized '{identifier}',	Shortest string "pu"
                    case 43: // Recognized '{identifier}',	Shortest string "po"
                    case 45: // Recognized '{identifier}',	Shortest string "pub"
                    case 46: // Recognized '{identifier}',	Shortest string "stat"
                    case 47: // Recognized '{identifier}',	Shortest string "stati"
                    case 48: // Recognized '{identifier}',	Shortest string "mi"
                    case 49: // Recognized '{identifier}',	Shortest string "mo"
                    case 50: // Recognized '{identifier}',	Shortest string "ma"
                    case 51: // Recognized '{identifier}',	Shortest string "mat"
                    case 52: // Recognized '{identifier}',	Shortest string "matr"
                    case 53: // Recognized '{identifier}',	Shortest string "matri"
                    case 54: // Recognized '{identifier}',	Shortest string "matrix"
                    case 55: // Recognized '{identifier}',	Shortest string "matrixC"
                    case 56: // Recognized '{identifier}',	Shortest string "matrixCo"
                    case 57: // Recognized '{identifier}',	Shortest string "matrixCom"
                    case 58: // Recognized '{identifier}',	Shortest string "matrixComp"
                    case 59: // Recognized '{identifier}',	Shortest string "matrixCompM"
                    case 60: // Recognized '{identifier}',	Shortest string "matrixCompMu"
                    case 61: // Recognized '{identifier}',	Shortest string "sqr"
                    case 62: // Recognized '{identifier}',	Shortest string "gr"
                    case 63: // Recognized '{identifier}',	Shortest string "gl"
                    case 64: // Recognized '{identifier}',	Shortest string "go"
                    case 65: // Recognized '{identifier}',	Shortest string "got"
                    case 66: // Recognized '{identifier}',	Shortest string "gl_"
                    case 67: // Recognized '{identifier}',	Shortest string "gl_D"
                    case 68: // Recognized '{identifier}',	Shortest string "gl_C"
                    case 69: // Recognized '{identifier}',	Shortest string "gl_B"
                    case 70: // Recognized '{identifier}',	Shortest string "gl_L"
                    case 71: // Recognized '{identifier}',	Shortest string "gl_M"
                    case 72: // Recognized '{identifier}',	Shortest string "gl_P"
                    case 73: // Recognized '{identifier}',	Shortest string "gl_V"
                    case 74: // Recognized '{identifier}',	Shortest string "gl_E"
                    case 75: // Recognized '{identifier}',	Shortest string "gl_T"
                    case 76: // Recognized '{identifier}',	Shortest string "gl_F"
                    case 77: // Recognized '{identifier}',	Shortest string "gl_N"
                    case 78: // Recognized '{identifier}',	Shortest string "gl_O"
                    case 79: // Recognized '{identifier}',	Shortest string "gl_Ob"
                    case 80: // Recognized '{identifier}',	Shortest string "gl_Obj"
                    case 81: // Recognized '{identifier}',	Shortest string "gl_Obje"
                    case 82: // Recognized '{identifier}',	Shortest string "gl_Objec"
                    case 83: // Recognized '{identifier}',	Shortest string "gl_Eye"
                    case 84: // Recognized '{identifier}',	Shortest string "gl_EyeP"
                    case 85: // Recognized '{identifier}',	Shortest string "gl_EyePl"
                    case 86: // Recognized '{identifier}',	Shortest string "gl_EyePla"
                    case 87: // Recognized '{identifier}',	Shortest string "gl_EyePlan"
                    case 88: // Recognized '{identifier}',	Shortest string "gl_EyePlane"
                    case 90: // Recognized '{identifier}',	Shortest string "gl_No"
                    case 91: // Recognized '{identifier}',	Shortest string "gl_Nor"
                    case 92: // Recognized '{identifier}',	Shortest string "gl_Norm"
                    case 93: // Recognized '{identifier}',	Shortest string "gl_Norma"
                    case 95: // Recognized '{identifier}',	Shortest string "gl_NormalS"
                    case 96: // Recognized '{identifier}',	Shortest string "gl_NormalM"
                    case 97: // Recognized '{identifier}',	Shortest string "gl_NormalMa"
                    case 98: // Recognized '{identifier}',	Shortest string "gl_NormalMat"
                    case 99: // Recognized '{identifier}',	Shortest string "gl_NormalMatr"
                    case 100: // Recognized '{identifier}',	Shortest string "gl_Verte"
                    case 101: // Recognized '{identifier}',	Shortest string "gl_NormalSc"
                    case 102: // Recognized '{identifier}',	Shortest string "gl_NormalSca"
                    case 103: // Recognized '{identifier}',	Shortest string "gl_ClipPlan"
                    case 104: // Recognized '{identifier}',	Shortest string "gl_Fr"
                    case 105: // Recognized '{identifier}',	Shortest string "gl_Fo"
                    case 107: // Recognized '{identifier}',	Shortest string "gl_FogP"
                    case 108: // Recognized '{identifier}',	Shortest string "gl_FogF"
                    case 109: // Recognized '{identifier}',	Shortest string "gl_FogFr"
                    case 110: // Recognized '{identifier}',	Shortest string "gl_FogFra"
                    case 111: // Recognized '{identifier}',	Shortest string "gl_FogFrag"
                    case 112: // Recognized '{identifier}',	Shortest string "gl_TexC"
                    case 113: // Recognized '{identifier}',	Shortest string "gl_TexCo"
                    case 114: // Recognized '{identifier}',	Shortest string "gl_TexCoo"
                    case 115: // Recognized '{identifier}',	Shortest string "gl_TexCoor"
                    case 116: // Recognized '{identifier}',	Shortest string "gl_FogPa"
                    case 117: // Recognized '{identifier}',	Shortest string "gl_FogPar"
                    case 118: // Recognized '{identifier}',	Shortest string "gl_FogPara"
                    case 119: // Recognized '{identifier}',	Shortest string "gl_FogParam"
                    case 120: // Recognized '{identifier}',	Shortest string "gl_FogParame"
                    case 121: // Recognized '{identifier}',	Shortest string "gl_FogParamet"
                    case 122: // Recognized '{identifier}',	Shortest string "gl_FogParamete"
                    case 123: // Recognized '{identifier}',	Shortest string "gl_MaxLight"
                    case 124: // Recognized '{identifier}',	Shortest string "gl_Fro"
                    case 125: // Recognized '{identifier}',	Shortest string "gl_Fra"
                    case 126: // Recognized '{identifier}',	Shortest string "gl_Frag"
                    case 127: // Recognized '{identifier}',	Shortest string "gl_FragD"
                    case 128: // Recognized '{identifier}',	Shortest string "gl_FragC"
                    case 129: // Recognized '{identifier}',	Shortest string "gl_FragCo"
                    case 130: // Recognized '{identifier}',	Shortest string "gl_Col"
                    case 131: // Recognized '{identifier}',	Shortest string "gl_Colo"
                    case 132: // Recognized '{identifier}',	Shortest string "gl_FragDe"
                    case 133: // Recognized '{identifier}',	Shortest string "gl_FragDa"
                    case 134: // Recognized '{identifier}',	Shortest string "gl_FragDat"
                    case 135: // Recognized '{identifier}',	Shortest string "gl_FragDep"
                    case 136: // Recognized '{identifier}',	Shortest string "gl_FragDept"
                    case 137: // Recognized '{identifier}',	Shortest string "gl_Fron"
                    case 138: // Recognized '{identifier}',	Shortest string "gl_Front"
                    case 139: // Recognized '{identifier}',	Shortest string "gl_S"
                    case 140: // Recognized '{identifier}',	Shortest string "gl_BackL"
                    case 141: // Recognized '{identifier}',	Shortest string "gl_BackM"
                    case 142: // Recognized '{identifier}',	Shortest string "gl_FrontF"
                    case 143: // Recognized '{identifier}',	Shortest string "gl_FrontFa"
                    case 144: // Recognized '{identifier}',	Shortest string "gl_FrontFac"
                    case 145: // Recognized '{identifier}',	Shortest string "gl_FrontFaci"
                    case 146: // Recognized '{identifier}',	Shortest string "gl_FrontFacin"
                    case 147: // Recognized '{identifier}',	Shortest string "gl_BackMa"
                    case 148: // Recognized '{identifier}',	Shortest string "gl_BackMat"
                    case 149: // Recognized '{identifier}',	Shortest string "gl_BackMate"
                    case 150: // Recognized '{identifier}',	Shortest string "gl_BackMater"
                    case 151: // Recognized '{identifier}',	Shortest string "gl_BackMateri"
                    case 152: // Recognized '{identifier}',	Shortest string "gl_BackMateria"
                    case 153: // Recognized '{identifier}',	Shortest string "gl_BackLi"
                    case 154: // Recognized '{identifier}',	Shortest string "gl_BackLig"
                    case 155: // Recognized '{identifier}',	Shortest string "gl_BackLigh"
                    case 156: // Recognized '{identifier}',	Shortest string "gl_BackLight"
                    case 157: // Recognized '{identifier}',	Shortest string "gl_BackLightM"
                    case 158: // Recognized '{identifier}',	Shortest string "gl_BackLightP"
                    case 159: // Recognized '{identifier}',	Shortest string "gl_BackLightPr"
                    case 160: // Recognized '{identifier}',	Shortest string "gl_BackLightPro"
                    case 161: // Recognized '{identifier}',	Shortest string "gl_BackLightProd"
                    case 162: // Recognized '{identifier}',	Shortest string "gl_BackLightProdu"
                    case 163: // Recognized '{identifier}',	Shortest string "gl_BackLightProduc"
                    case 164: // Recognized '{identifier}',	Shortest string "gl_BackLightMo"
                    case 165: // Recognized '{identifier}',	Shortest string "gl_BackLightMod"
                    case 166: // Recognized '{identifier}',	Shortest string "gl_BackLightMode"
                    case 167: // Recognized '{identifier}',	Shortest string "gl_BackLightModel"
                    case 168: // Recognized '{identifier}',	Shortest string "gl_Se"
                    case 169: // Recognized '{identifier}',	Shortest string "gl_Sec"
                    case 170: // Recognized '{identifier}',	Shortest string "gl_Seco"
                    case 171: // Recognized '{identifier}',	Shortest string "gl_Secon"
                    case 172: // Recognized '{identifier}',	Shortest string "gl_Second"
                    case 173: // Recognized '{identifier}',	Shortest string "gl_Seconda"
                    case 174: // Recognized '{identifier}',	Shortest string "gl_Secondar"
                    case 175: // Recognized '{identifier}',	Shortest string "gl_Secondary"
                    case 176: // Recognized '{identifier}',	Shortest string "gl_BackC"
                    case 177: // Recognized '{identifier}',	Shortest string "gl_Co"
                    case 178: // Recognized '{identifier}',	Shortest string "gl_Te"
                    case 179: // Recognized '{identifier}',	Shortest string "gl_Tex"
                    case 180: // Recognized '{identifier}',	Shortest string "gl_Text"
                    case 181: // Recognized '{identifier}',	Shortest string "gl_Textu"
                    case 182: // Recognized '{identifier}',	Shortest string "gl_Textur"
                    case 183: // Recognized '{identifier}',	Shortest string "gl_Texture"
                    case 184: // Recognized '{identifier}',	Shortest string "gl_TextureE"
                    case 185: // Recognized '{identifier}',	Shortest string "gl_TextureEn"
                    case 186: // Recognized '{identifier}',	Shortest string ""
                    case 188: // Recognized '{identifier}',	Shortest string ""
                    case 189: // Recognized '{identifier}',	Shortest string ""
                    case 190: // Recognized '{identifier}',	Shortest string ""
                    case 191: // Recognized '{identifier}',	Shortest string ""
                    case 192: // Recognized '{identifier}',	Shortest string ""
                    case 193: // Recognized '{identifier}',	Shortest string ""
                    case 195: // Recognized '{identifier}',	Shortest string ""
                    case 196: // Recognized '{identifier}',	Shortest string ""
                    case 197: // Recognized '{identifier}',	Shortest string ""
                    case 198: // Recognized '{identifier}',	Shortest string ""
                    case 199: // Recognized '{identifier}',	Shortest string ""
                    case 200: // Recognized '{identifier}',	Shortest string ""
                    case 201: // Recognized '{identifier}',	Shortest string ""
                    case 202: // Recognized '{identifier}',	Shortest string "gl_Ey"
                    case 203: // Recognized '{identifier}',	Shortest string "gl_Ve"
                    case 204: // Recognized '{identifier}',	Shortest string "gl_Ver"
                    case 205: // Recognized '{identifier}',	Shortest string "gl_Vert"
                    case 206: // Recognized '{identifier}',	Shortest string "gl_Pr"
                    case 207: // Recognized '{identifier}',	Shortest string "gl_Po"
                    case 208: // Recognized '{identifier}',	Shortest string "gl_Poi"
                    case 209: // Recognized '{identifier}',	Shortest string "gl_Pos"
                    case 210: // Recognized '{identifier}',	Shortest string "gl_Posi"
                    case 211: // Recognized '{identifier}',	Shortest string "gl_Posit"
                    case 212: // Recognized '{identifier}',	Shortest string "gl_Positi"
                    case 213: // Recognized '{identifier}',	Shortest string "gl_Positio"
                    case 214: // Recognized '{identifier}',	Shortest string "gl_Poin"
                    case 216: // Recognized '{identifier}',	Shortest string "gl_PointS"
                    case 217: // Recognized '{identifier}',	Shortest string "gl_PointSi"
                    case 218: // Recognized '{identifier}',	Shortest string "gl_Pro"
                    case 219: // Recognized '{identifier}',	Shortest string "gl_Proj"
                    case 220: // Recognized '{identifier}',	Shortest string "gl_Proje"
                    case 221: // Recognized '{identifier}',	Shortest string "gl_Projec"
                    case 222: // Recognized '{identifier}',	Shortest string "gl_Project"
                    case 223: // Recognized '{identifier}',	Shortest string "gl_Projecti"
                    case 224: // Recognized '{identifier}',	Shortest string "gl_Projectio"
                    case 225: // Recognized '{identifier}',	Shortest string "gl_Projection"
                    case 226: // Recognized '{identifier}',	Shortest string "gl_Mu"
                    case 227: // Recognized '{identifier}',	Shortest string "gl_Mo"
                    case 228: // Recognized '{identifier}',	Shortest string "gl_Ma"
                    case 229: // Recognized '{identifier}',	Shortest string "gl_Mat"
                    case 230: // Recognized '{identifier}',	Shortest string "gl_Max"
                    case 231: // Recognized '{identifier}',	Shortest string "gl_MaxD"
                    case 232: // Recognized '{identifier}',	Shortest string "gl_MaxC"
                    case 233: // Recognized '{identifier}',	Shortest string "gl_MaxL"
                    case 234: // Recognized '{identifier}',	Shortest string "gl_MaxV"
                    case 235: // Recognized '{identifier}',	Shortest string "gl_MaxT"
                    case 236: // Recognized '{identifier}',	Shortest string "gl_MaxF"
                    case 237: // Recognized '{identifier}',	Shortest string "gl_MaxFr"
                    case 238: // Recognized '{identifier}',	Shortest string "gl_MaxFra"
                    case 239: // Recognized '{identifier}',	Shortest string "gl_MaxFrag"
                    case 240: // Recognized '{identifier}',	Shortest string "gl_MaxFragm"
                    case 241: // Recognized '{identifier}',	Shortest string "gl_MaxFragme"
                    case 242: // Recognized '{identifier}',	Shortest string "gl_MaxFragmen"
                    case 243: // Recognized '{identifier}',	Shortest string "gl_MaxFragment"
                    case 244: // Recognized '{identifier}',	Shortest string "gl_MaxVertexU"
                    case 245: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUn"
                    case 246: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUni"
                    case 247: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUnif"
                    case 248: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUnifo"
                    case 249: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUnifor"
                    case 250: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniform"
                    case 251: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniformC"
                    case 252: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniformCo"
                    case 253: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniformCom"
                    case 254: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniformComp"
                    case 255: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniformCompo"
                    case 256: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniformCompon"
                    case 257: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUniformCompone"
                    case 258: // Recognized '{identifier}',	Shortest string "gl_MaxLigh"
                    case 259: // Recognized '{identifier}',	Shortest string "gl_MaxTe"
                    case 260: // Recognized '{identifier}',	Shortest string "gl_MaxTex"
                    case 261: // Recognized '{identifier}',	Shortest string "gl_MaxText"
                    case 262: // Recognized '{identifier}',	Shortest string "gl_MaxTextu"
                    case 263: // Recognized '{identifier}',	Shortest string "gl_MaxTextur"
                    case 264: // Recognized '{identifier}',	Shortest string "gl_MaxTexture"
                    case 265: // Recognized '{identifier}',	Shortest string "gl_MaxTextureC"
                    case 266: // Recognized '{identifier}',	Shortest string "gl_MaxTextureI"
                    case 267: // Recognized '{identifier}',	Shortest string "gl_MaxTextureU"
                    case 268: // Recognized '{identifier}',	Shortest string "gl_MaxTextureUn"
                    case 269: // Recognized '{identifier}',	Shortest string "gl_MaxTextureIm"
                    case 270: // Recognized '{identifier}',	Shortest string "gl_MaxTextureIma"
                    case 271: // Recognized '{identifier}',	Shortest string "gl_MaxTextureImag"
                    case 272: // Recognized '{identifier}',	Shortest string "gl_MaxTextureImage"
                    case 273: // Recognized '{identifier}',	Shortest string "gl_MaxTextureCo"
                    case 274: // Recognized '{identifier}',	Shortest string "gl_MaxTextureCoo"
                    case 275: // Recognized '{identifier}',	Shortest string "gl_MaxTextureCoor"
                    case 276: // Recognized '{identifier}',	Shortest string "gl_MaxVe"
                    case 277: // Recognized '{identifier}',	Shortest string "gl_MaxVa"
                    case 278: // Recognized '{identifier}',	Shortest string "gl_MaxVar"
                    case 279: // Recognized '{identifier}',	Shortest string "gl_MaxVary"
                    case 280: // Recognized '{identifier}',	Shortest string "gl_MaxVaryi"
                    case 281: // Recognized '{identifier}',	Shortest string "gl_MaxVaryin"
                    case 282: // Recognized '{identifier}',	Shortest string "gl_MaxVarying"
                    case 283: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingF"
                    case 284: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingFl"
                    case 285: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingFlo"
                    case 286: // Recognized '{identifier}',	Shortest string "gl_MaxVer"
                    case 287: // Recognized '{identifier}',	Shortest string "gl_MaxVert"
                    case 288: // Recognized '{identifier}',	Shortest string "gl_MaxVerte"
                    case 289: // Recognized '{identifier}',	Shortest string "gl_MaxVertex"
                    case 290: // Recognized '{identifier}',	Shortest string "gl_MaxVertexT"
                    case 291: // Recognized '{identifier}',	Shortest string "gl_MaxVertexA"
                    case 292: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAt"
                    case 293: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtt"
                    case 294: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAttr"
                    case 295: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAttri"
                    case 296: // Recognized '{identifier}',	Shortest string "gl_MaxVertexTe"
                    case 297: // Recognized '{identifier}',	Shortest string "gl_MaxVertexTex"
                    case 298: // Recognized '{identifier}',	Shortest string "gl_MaxVertexText"
                    case 299: // Recognized '{identifier}',	Shortest string "gl_MaxVertexTextu"
                    case 300: // Recognized '{identifier}',	Shortest string "gl_MaxVertexTextur"
                    case 301: // Recognized '{identifier}',	Shortest string "gl_MaxVertexTexture"
                    case 302: // Recognized '{identifier}',	Shortest string "gl_MaxLi"
                    case 303: // Recognized '{identifier}',	Shortest string "gl_MaxLig"
                    case 304: // Recognized '{identifier}',	Shortest string "gl_MaxCl"
                    case 305: // Recognized '{identifier}',	Shortest string "gl_MaxCo"
                    case 306: // Recognized '{identifier}',	Shortest string "gl_MaxCom"
                    case 307: // Recognized '{identifier}',	Shortest string "gl_MaxComb"
                    case 308: // Recognized '{identifier}',	Shortest string "gl_MaxCombi"
                    case 309: // Recognized '{identifier}',	Shortest string "gl_MaxCombin"
                    case 310: // Recognized '{identifier}',	Shortest string "gl_MaxCombine"
                    case 311: // Recognized '{identifier}',	Shortest string "gl_MaxCombined"
                    case 312: // Recognized '{identifier}',	Shortest string "gl_MaxCli"
                    case 313: // Recognized '{identifier}',	Shortest string "gl_MaxClip"
                    case 314: // Recognized '{identifier}',	Shortest string "gl_MaxClipP"
                    case 315: // Recognized '{identifier}',	Shortest string "gl_MaxClipPl"
                    case 316: // Recognized '{identifier}',	Shortest string "gl_MaxClipPla"
                    case 317: // Recognized '{identifier}',	Shortest string "gl_MaxClipPlan"
                    case 318: // Recognized '{identifier}',	Shortest string "gl_MaxDr"
                    case 319: // Recognized '{identifier}',	Shortest string "gl_MaxDra"
                    case 320: // Recognized '{identifier}',	Shortest string "gl_MaxDraw"
                    case 321: // Recognized '{identifier}',	Shortest string "gl_MaxDrawB"
                    case 322: // Recognized '{identifier}',	Shortest string "gl_MaxDrawBu"
                    case 323: // Recognized '{identifier}',	Shortest string "gl_MaxDrawBuf"
                    case 324: // Recognized '{identifier}',	Shortest string "gl_Mate"
                    case 325: // Recognized '{identifier}',	Shortest string "gl_Mater"
                    case 326: // Recognized '{identifier}',	Shortest string "gl_Materi"
                    case 327: // Recognized '{identifier}',	Shortest string "gl_Materia"
                    case 328: // Recognized '{identifier}',	Shortest string "gl_Material"
                    case 329: // Recognized '{identifier}',	Shortest string "gl_Mod"
                    case 330: // Recognized '{identifier}',	Shortest string "gl_Mode"
                    case 331: // Recognized '{identifier}',	Shortest string "gl_Model"
                    case 332: // Recognized '{identifier}',	Shortest string "gl_ModelV"
                    case 333: // Recognized '{identifier}',	Shortest string "gl_ModelVi"
                    case 334: // Recognized '{identifier}',	Shortest string "gl_ModelVie"
                    case 335: // Recognized '{identifier}',	Shortest string "gl_ModelView"
                    case 336: // Recognized '{identifier}',	Shortest string "gl_ModelViewP"
                    case 337: // Recognized '{identifier}',	Shortest string "gl_Mul"
                    case 338: // Recognized '{identifier}',	Shortest string "gl_Mult"
                    case 339: // Recognized '{identifier}',	Shortest string "gl_Multi"
                    case 340: // Recognized '{identifier}',	Shortest string "gl_MultiT"
                    case 341: // Recognized '{identifier}',	Shortest string "gl_MultiTe"
                    case 342: // Recognized '{identifier}',	Shortest string "gl_MultiTex"
                    case 343: // Recognized '{identifier}',	Shortest string "gl_MultiTexC"
                    case 344: // Recognized '{identifier}',	Shortest string "gl_MultiTexCo"
                    case 345: // Recognized '{identifier}',	Shortest string "gl_MultiTexCoo"
                    case 346: // Recognized '{identifier}',	Shortest string "gl_MultiTexCoor"
                    case 347: // Recognized '{identifier}',	Shortest string "gl_MultiTexCoord"
                    case 350: // Recognized '{identifier}',	Shortest string "gl_Li"
                    case 351: // Recognized '{identifier}',	Shortest string "gl_Lig"
                    case 352: // Recognized '{identifier}',	Shortest string "gl_Ligh"
                    case 353: // Recognized '{identifier}',	Shortest string "gl_Light"
                    case 354: // Recognized '{identifier}',	Shortest string "gl_LightS"
                    case 355: // Recognized '{identifier}',	Shortest string "gl_LightM"
                    case 356: // Recognized '{identifier}',	Shortest string "gl_LightP"
                    case 357: // Recognized '{identifier}',	Shortest string "gl_LightPr"
                    case 358: // Recognized '{identifier}',	Shortest string "gl_LightPro"
                    case 359: // Recognized '{identifier}',	Shortest string "gl_LightProd"
                    case 360: // Recognized '{identifier}',	Shortest string "gl_LightProdu"
                    case 361: // Recognized '{identifier}',	Shortest string "gl_LightMo"
                    case 362: // Recognized '{identifier}',	Shortest string "gl_LightMod"
                    case 363: // Recognized '{identifier}',	Shortest string "gl_LightMode"
                    case 365: // Recognized '{identifier}',	Shortest string "gl_LightModelP"
                    case 366: // Recognized '{identifier}',	Shortest string "gl_LightSo"
                    case 367: // Recognized '{identifier}',	Shortest string "gl_LightSou"
                    case 368: // Recognized '{identifier}',	Shortest string "gl_LightSour"
                    case 369: // Recognized '{identifier}',	Shortest string "gl_DepthRang"
                    case 371: // Recognized '{identifier}',	Shortest string "gl_Ba"
                    case 372: // Recognized '{identifier}',	Shortest string "gl_Bac"
                    case 373: // Recognized '{identifier}',	Shortest string "gl_Back"
                    case 374: // Recognized '{identifier}',	Shortest string "gl_Cl"
                    case 375: // Recognized '{identifier}',	Shortest string "gl_Cli"
                    case 376: // Recognized '{identifier}',	Shortest string "gl_Clip"
                    case 377: // Recognized '{identifier}',	Shortest string "gl_ClipP"
                    case 378: // Recognized '{identifier}',	Shortest string "gl_ClipPl"
                    case 379: // Recognized '{identifier}',	Shortest string "gl_ClipPla"
                    case 380: // Recognized '{identifier}',	Shortest string "gl_De"
                    case 381: // Recognized '{identifier}',	Shortest string "gl_Dep"
                    case 382: // Recognized '{identifier}',	Shortest string "gl_Dept"
                    case 383: // Recognized '{identifier}',	Shortest string "gl_Depth"
                    case 384: // Recognized '{identifier}',	Shortest string "gl_DepthR"
                    case 385: // Recognized '{identifier}',	Shortest string "gl_DepthRa"
                    case 386: // Recognized '{identifier}',	Shortest string "gl_DepthRan"
                    case 387: // Recognized '{identifier}',	Shortest string "gre"
                    case 388: // Recognized '{identifier}',	Shortest string "grea"
                    case 389: // Recognized '{identifier}',	Shortest string "great"
                    case 390: // Recognized '{identifier}',	Shortest string "greate"
                    case 391: // Recognized '{identifier}',	Shortest string "less"
                    case 392: // Recognized '{identifier}',	Shortest string "lessT"
                    case 393: // Recognized '{identifier}',	Shortest string "lessTh"
                    case 394: // Recognized '{identifier}',	Shortest string "lessTha"
                    case 396: // Recognized '{identifier}',	Shortest string "notE"
                    case 397: // Recognized '{identifier}',	Shortest string "eq"
                    case 398: // Recognized '{identifier}',	Shortest string "equ"
                    case 399: // Recognized '{identifier}',	Shortest string "al"
                    case 400: // Recognized '{identifier}',	Shortest string "br"
                    case 401: // Recognized '{identifier}',	Shortest string "bo"
                    case 402: // Recognized '{identifier}',	Shortest string "iv"
                    case 403: // Recognized '{identifier}',	Shortest string "ive"
                    case 405: // Recognized '{identifier}',	Shortest string "boo"
                    case 406: // Recognized '{identifier}',	Shortest string "bre"
                    case 407: // Recognized '{identifier}',	Shortest string "brea"
                    case 408: // Recognized '{identifier}',	Shortest string "cr"
                    case 409: // Recognized '{identifier}',	Shortest string "ce"
                    case 410: // Recognized '{identifier}',	Shortest string "cl"
                    case 411: // Recognized '{identifier}',	Shortest string "co"
                    case 412: // Recognized '{identifier}',	Shortest string "el"
                    case 413: // Recognized '{identifier}',	Shortest string "con"
                    case 414: // Recognized '{identifier}',	Shortest string "cont"
                    case 415: // Recognized '{identifier}',	Shortest string "cons"
                    case 416: // Recognized '{identifier}',	Shortest string "conti"
                    case 417: // Recognized '{identifier}',	Shortest string "tr"
                    case 418: // Recognized '{identifier}',	Shortest string "cla"
                    case 419: // Recognized '{identifier}',	Shortest string "thi"
                    case 420: // Recognized '{identifier}',	Shortest string "ste"
                    case 421: // Recognized '{identifier}',	Shortest string "cro"
                    case 422: // Recognized '{identifier}',	Shortest string "ab"
                    case 423: // Recognized '{identifier}',	Shortest string "at"
                    case 424: // Recognized '{identifier}',	Shortest string "an"
                    case 425: // Recognized '{identifier}',	Shortest string "as"
                    case 426: // Recognized '{identifier}',	Shortest string "ac"
                    case 427: // Recognized '{identifier}',	Shortest string "ta"
                    case 428: // Recognized '{identifier}',	Shortest string "att"
                    case 429: // Recognized '{identifier}',	Shortest string "attr"
                    case 430: // Recognized '{identifier}',	Shortest string "attri"
                    case 431: // Recognized '{identifier}',	Shortest string "attrib"
                    case 432: // Recognized '{identifier}',	Shortest string "attribu"
                    case 433: // Recognized '{identifier}',	Shortest string "attribut"
                    case 434: // Recognized '{identifier}',	Shortest string "ou"
                    case 435: // Recognized '{identifier}',	Shortest string "de"
                    case 436: // Recognized '{identifier}',	Shortest string "di"
                    case 438: // Recognized '{identifier}',	Shortest string "dis"
                    case 439: // Recognized '{identifier}',	Shortest string "dist"
                    case 440: // Recognized '{identifier}',	Shortest string "dista"
                    case 441: // Recognized '{identifier}',	Shortest string "distan"
                    case 442: // Recognized '{identifier}',	Shortest string "distanc"
                    case 443: // Recognized '{identifier}',	Shortest string "def"
                    case 444: // Recognized '{identifier}',	Shortest string "deg"
                    case 445: // Recognized '{identifier}',	Shortest string "degr"
                    case 446: // Recognized '{identifier}',	Shortest string "defa"
                    case 447: // Recognized '{identifier}',	Shortest string "defau"
                    case 448: // Recognized '{identifier}',	Shortest string "st"
                    case 449: // Recognized '{identifier}',	Shortest string "si"
                    case 450: // Recognized '{identifier}',	Shortest string "sw"
                    case 451: // Recognized '{identifier}',	Shortest string "sa"
                    case 452: // Recognized '{identifier}',	Shortest string "sm"
                    case 453: // Recognized '{identifier}',	Shortest string "sq"
                    case 454: // Recognized '{identifier}',	Shortest string "smo"
                    case 455: // Recognized '{identifier}',	Shortest string "smoo"
                    case 456: // Recognized '{identifier}',	Shortest string "smoot"
                    case 457: // Recognized '{identifier}',	Shortest string "smooth"
                    case 458: // Recognized '{identifier}',	Shortest string "smooths"
                    case 459: // Recognized '{identifier}',	Shortest string "smoothst"
                    case 460: // Recognized '{identifier}',	Shortest string "sam"
                    case 461: // Recognized '{identifier}',	Shortest string "samp"
                    case 462: // Recognized '{identifier}',	Shortest string "sampl"
                    case 463: // Recognized '{identifier}',	Shortest string "sample"
                    case 464: // Recognized '{identifier}',	Shortest string "sampler"
                    case 465: // Recognized '{identifier}',	Shortest string "sampler3"
                    case 466: // Recognized '{identifier}',	Shortest string "sampler2"
                    case 467: // Recognized '{identifier}',	Shortest string "samplerC"
                    case 468: // Recognized '{identifier}',	Shortest string "samplerCu"
                    case 469: // Recognized '{identifier}',	Shortest string "samplerCub"
                    case 472: // Recognized '{identifier}',	Shortest string "swi"
                    case 473: // Recognized '{identifier}',	Shortest string "swit"
                    case 474: // Recognized '{identifier}',	Shortest string "switc"
                    case 475: // Recognized '{identifier}',	Shortest string "str"
                    case 476: // Recognized '{identifier}',	Shortest string "sta"
                    case 477: // Recognized '{identifier}',	Shortest string "stru"
                    case 478: // Recognized '{identifier}',	Shortest string "le"
                    case 479: // Recognized '{identifier}',	Shortest string "lo"
                    case 482: // Recognized '{identifier}',	Shortest string "len"
                    case 483: // Recognized '{identifier}',	Shortest string "les"
                    case 484: // Recognized '{identifier}',	Shortest string "leng"
                    case 485: // Recognized '{identifier}',	Shortest string "lengt"
                    case 486: // Recognized '{identifier}',	Shortest string "fr"
                    case 487: // Recognized '{identifier}',	Shortest string "fl"
                    case 488: // Recognized '{identifier}',	Shortest string "fo"
                    case 489: // Recognized '{identifier}',	Shortest string "fa"
                    case 490: // Recognized '{identifier}',	Shortest string "fac"
                    case 491: // Recognized '{identifier}',	Shortest string "face"
                    case 492: // Recognized '{identifier}',	Shortest string "facef"
                    case 493: // Recognized '{identifier}',	Shortest string "facefo"
                    case 494: // Recognized '{identifier}',	Shortest string "facefor"
                    case 495: // Recognized '{identifier}',	Shortest string "faceforw"
                    case 496: // Recognized '{identifier}',	Shortest string "faceforwa"
                    case 498: // Recognized '{identifier}',	Shortest string "fore"
                    case 499: // Recognized '{identifier}',	Shortest string "flo"
                    case 500: // Recognized '{identifier}',	Shortest string "floo"
                    case 501: // Recognized '{identifier}',	Shortest string "floa"
                    case 502: // Recognized '{identifier}',	Shortest string "fra"
                    case 505: // Recognized '{identifier}',	Shortest string "inv"
                    case 506: // Recognized '{identifier}',	Shortest string "inve"
                    case 507: // Recognized '{identifier}',	Shortest string "inver"
                    case 508: // Recognized '{identifier}',	Shortest string "invers"
                    case 509: // Recognized '{identifier}',	Shortest string "inverse"
                    case 510: // Recognized '{identifier}',	Shortest string "inverses"
                    case 511: // Recognized '{identifier}',	Shortest string "inte"
                    case 512: // Recognized '{identifier}',	Shortest string "inter"
                    case 513: // Recognized '{identifier}',	Shortest string "namesp"
                    case 514: // Recognized '{identifier}',	Shortest string "namespa"
                    case 515: // Recognized '{identifier}',	Shortest string "no"
                    case 516: // Recognized '{identifier}',	Shortest string "na"
                    case 517: // Recognized '{identifier}',	Shortest string "nam"
                    case 518: // Recognized '{identifier}',	Shortest string "name"
                    case 519: // Recognized '{identifier}',	Shortest string "names"
                    case 520: // Recognized '{identifier}',	Shortest string "nor"
                    case 521: // Recognized '{identifier}',	Shortest string "norm"
                    case 522: // Recognized '{identifier}',	Shortest string "norma"
                    case 523: // Recognized '{identifier}',	Shortest string "normal"
                    case 524: // Recognized '{identifier}',	Shortest string "normali"
                    case 525: // Recognized '{identifier}',	Shortest string "un"
                    case 526: // Recognized '{identifier}',	Shortest string "us"
                    case 527: // Recognized '{identifier}',	Shortest string "usi"
                    case 528: // Recognized '{identifier}',	Shortest string "usin"
                    case 529: // Recognized '{identifier}',	Shortest string "uni"
                    case 530: // Recognized '{identifier}',	Shortest string "unif"
                    case 531: // Recognized '{identifier}',	Shortest string "unifo"
                    case 532: // Recognized '{identifier}',	Shortest string "unifor"
                    case 533: // Recognized '{identifier}',	Shortest string "te"
                    case 534: // Recognized '{identifier}',	Shortest string "th"
                    case 535: // Recognized '{identifier}',	Shortest string "tex"
                    case 536: // Recognized '{identifier}',	Shortest string "text"
                    case 537: // Recognized '{identifier}',	Shortest string "textu"
                    case 538: // Recognized '{identifier}',	Shortest string "textur"
                    case 539: // Recognized '{identifier}',	Shortest string "texture"
                    case 540: // Recognized '{identifier}',	Shortest string "texture2"
                    case 541: // Recognized '{identifier}',	Shortest string "textureC"
                    case 542: // Recognized '{identifier}',	Shortest string "textureCu"
                    case 543: // Recognized '{identifier}',	Shortest string "textureCub"
                    case 545: // Recognized '{identifier}',	Shortest string "textureCubeL"
                    case 549: // Recognized '{identifier}',	Shortest string "en"
                    case 550: // Recognized '{identifier}',	Shortest string "ex"
                    case 551: // Recognized '{identifier}',	Shortest string "ext"
                    case 552: // Recognized '{identifier}',	Shortest string "retu"
                    case 553: // Recognized '{identifier}',	Shortest string "retur"
                    case 554: // Recognized '{identifier}',	Shortest string "enu"
                    case 555: // Recognized '{identifier}',	Shortest string "end"
                    case 556: // Recognized '{identifier}',	Shortest string "endi"
                    case 557: // Recognized '{identifier}',	Shortest string "re"
                    case 558: // Recognized '{identifier}',	Shortest string "ra"
                    case 559: // Recognized '{identifier}',	Shortest string "rad"
                    case 560: // Recognized '{identifier}',	Shortest string "radi"
                    case 561: // Recognized '{identifier}',	Shortest string "radia"
                    case 562: // Recognized '{identifier}',	Shortest string "ret"
                    case 563: // Recognized '{identifier}',	Shortest string "ref"
                    case 564: // Recognized '{identifier}',	Shortest string "refl"
                    return (int)GLSLTokenType.Identifier;
                    break;
                    case 21: // Recognized '{comment}',	Shortest string "//"
                    case 22: // Recognized '{comment}',	Shortest string "/**/"
                    return (int)GLSLTokenType.Comment;
                    break;
                    case 33: // Recognized '{qualifier}',	Shortest string "const"
                    return (int)GLSLTokenType.Qualifier;
                    break;
                    case 39: // Recognized '{keyword}',	Shortest string "if"
                    case 437: // Recognized '{keyword}',	Shortest string "do"
                    case 497: // Recognized '{keyword}',	Shortest string "for"
                    case 503: // Recognized '{keyword}',	Shortest string "in"
                    return (int)GLSLTokenType.Keyword;
                    break;
                    case 40: // Recognized '{class}',	Shortest string "vec"
                    case 41: // Recognized '{class}',	Shortest string "mat2"
                    case 404: // Recognized '{class}',	Shortest string "ivec"
                    case 470: // Recognized '{class}',	Shortest string "sampler2D"
                    case 471: // Recognized '{class}',	Shortest string "sampler3D"
                    case 504: // Recognized '{class}',	Shortest string "int"
                    return (int)GLSLTokenType.Class;
                    break;
                    case 44: // Recognized '{systemFunction}',	Shortest string "tan"
                    case 395: // Recognized '{systemFunction}',	Shortest string "not"
                    case 480: // Recognized '{systemFunction}',	Shortest string "exp"
                    case 481: // Recognized '{systemFunction}',	Shortest string "exp2"
                    case 544: // Recognized '{systemFunction}',	Shortest string "textureCube"
                    case 546: // Recognized '{systemFunction}',	Shortest string "texture2D"
                    case 547: // Recognized '{systemFunction}',	Shortest string "texture2DProj"
                    case 548: // Recognized '{systemFunction}',	Shortest string "texture2DLod"
                    return (int)GLSLTokenType.SystemFunction;
                    break;
                    case 89: // Recognized '{systemVariable}',	Shortest string "gl_Color"
                    case 94: // Recognized '{systemVariable}',	Shortest string "gl_Normal"
                    case 106: // Recognized '{systemVariable}',	Shortest string "gl_Fog"
                    case 187: // Recognized '{systemVariable}',	Shortest string ""
                    case 194: // Recognized '{systemVariable}',	Shortest string ""
                    case 215: // Recognized '{systemVariable}',	Shortest string "gl_Point"
                    case 348: // Recognized '{systemVariable}',	Shortest string "gl_MultiTexCoord2"
                    case 349: // Recognized '{systemVariable}',	Shortest string "gl_MultiTexCoord1"
                    case 364: // Recognized '{systemVariable}',	Shortest string "gl_LightModel"
                    case 370: // Recognized '{systemVariable}',	Shortest string "gl_DepthRange"
                    return (int)GLSLTokenType.SystemVariable;
                    break;
                    default:
                    break;
                    }
#pragma warning restore 162, 1522
                    #endregion
                }
            }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos = buffer.Pos;
            ctx.rPos = readPos;
            ctx.cCol = cCol;
            ctx.lNum = lNum;
            ctx.state = state;
            ctx.cChr = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol = ctx.cCol;
            lNum = ctx.lNum;
            state = ctx.state;
            code = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }

        internal void yy_push_state(int state) {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }

        internal void yy_pop_state() {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
                int newSc = scStack.Pop();
                BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
#endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }

    } // end class $Scanner

    // ==============================================================
    // <auto-generated>
    // This code automatically produced from an embedded resource.
    // Do not edit this file, or it will become incompatible with 
    // the specification from which it was generated.
    // </auto-generated>
    // ==============================================================

    // Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source) {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source) {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source) {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage) {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source) {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read() {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit) {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList) {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read() {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart) {
            if (pos >= cachedPosition) {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else {
                ix = lstart = 0;
            }
            while (ix < numLines) {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit) {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx) {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length) {
                sb.Append(s.Substring(0, endCol));
            }
            else {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos {
            get { return cPos; }
            set {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff {
        // Double buffer for char stream.
        class BufferElement {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index] {
                get {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count) {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit) {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit) {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName {
            get {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream) {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage) {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read() {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex) {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit) {
            return data.GetString(begin, limit);
        }

        public override string ToString() {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory {
        public static BlockReader Raw(Stream stream) {
            return delegate (char[] block, int index, int number) {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage) {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream) {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling {
        public static int GetCodePage(string option) {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException) {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException) {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
    #region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser() {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState() {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source) {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan() {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum) {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept) {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state) {
                    case eofNum:
                    switch (currentStart) {
                    case 11:
                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                    else return 65001;                     /* UTF-8 encoding */
                    break;
                    }
                    return EndToken;
                    case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                    case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                    case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                    case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                    uppr++;
                    break;
                    case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                    uppr += 2;
                    break;
                    case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                    uppr += 3;
                    break;
                    case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                    utfX += 3;
                    break;
                    case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                    uppr += 2;
                    break;
                    case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                    utfX += 2;
                    break;
                    case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                    utfX++;
                    break;
                    default:
                    break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser

#endif // !BYTEMODE
    #endregion
#endif // !NOFILES

    // End of code copied from embedded resource

} // end namespace
