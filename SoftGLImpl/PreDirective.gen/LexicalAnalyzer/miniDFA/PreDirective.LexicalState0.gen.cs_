using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.PreDirectiveFormat {
    partial class CompilerPreDirective {

#if noTableDFA
        /// <summary>
        /// lexicalState0
        /// <para>CompilerPreDirective.Lexical●[1 DFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState0 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* user-input condition code */
            /* " */
            else if (/* possible Vt : 'literalString' */
            /* no possible signal */
            /* single char */
            c == '"'/*'\u0022'(34)*/) {
                BeginToken(context);
                wrap.currentState = lexicalState1;
            }
            /* user-input condition code */
            /* } */
            else if (/* possible Vt : '}' */
            /* no possible signal */
            /* single char */
            c == '}'/*'\u007D'(125)*/) {
                BeginToken(context);
                ExtendToken(context, st.@RightBrace符);
                wrap.currentState = lexicalState55;
            }
            /* user-input condition code */
            /* \{ */
            else if (/* possible Vt : '{' */
            /* no possible signal */
            /* single char */
            c == '{'/*'\u007B'(123)*/) {
                BeginToken(context);
                ExtendToken(context, st.@LeftBrace符);
                wrap.currentState = lexicalState56;
            }
            /* user-input condition code */
            /* : */
            else if (/* possible Vt : ':' */
            /* no possible signal */
            /* single char */
            c == ':'/*'\u003A'(58)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Colon符);
                wrap.currentState = lexicalState57;
            }
            /* user-input condition code */
            /* \? */
            else if (/* possible Vt : '?' */
            /* no possible signal */
            /* single char */
            c == '?'/*'\u003F'(63)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Question符);
                wrap.currentState = lexicalState58;
            }
            /* user-input condition code */
            /* ~ */
            else if (/* possible Vt : '~' */
            /* no possible signal */
            /* single char */
            c == '~'/*'\u007E'(126)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Tilde符);
                wrap.currentState = lexicalState59;
            }
            /* user-input condition code */
            /* \. */
            else if (/* possible Vt : '.' */
            /* no possible signal */
            /* single char */
            c == '.'/*'\u002E'(46)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Dot符);
                wrap.currentState = lexicalState60;
            }
            /* user-input condition code */
            /* ] */
            else if (/* possible Vt : ']' */
            /* no possible signal */
            /* single char */
            c == ']'/*'\u005D'(93)*/) {
                BeginToken(context);
                ExtendToken(context, st.@RightBracket符);
                wrap.currentState = lexicalState61;
            }
            /* user-input condition code */
            /* \[ */
            else if (/* possible Vt : '[' */
            /* no possible signal */
            /* single char */
            c == '['/*'\u005B'(91)*/) {
                BeginToken(context);
                ExtendToken(context, st.@LeftBracket符);
                wrap.currentState = lexicalState62;
            }
            /* user-input condition code */
            /* ; */
            else if (/* possible Vt : ';' */
            /* no possible signal */
            /* single char */
            c == ';'/*'\u003B'(59)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Semicolon符);
                wrap.currentState = lexicalState63;
            }
            /* user-input condition code */
            /* , */
            else if (/* possible Vt : ',' */
            /* no possible signal */
            /* single char */
            c == ','/*'\u002C'(44)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Comma符);
                wrap.currentState = lexicalState64;
            }
            /* user-input condition code */
            /* \) */
            else if (/* possible Vt : ')' */
            /* no possible signal */
            /* single char */
            c == ')'/*'\u0029'(41)*/) {
                BeginToken(context);
                ExtendToken(context, st.@RightParenthesis符);
                wrap.currentState = lexicalState65;
            }
            /* user-input condition code */
            /* \( */
            else if (/* possible Vt : '(' */
            /* no possible signal */
            /* single char */
            c == '('/*'\u0028'(40)*/) {
                BeginToken(context);
                ExtendToken(context, st.@LeftParenthesis符);
                wrap.currentState = lexicalState66;
            }
            /* auto-generated condition code */
            /* [A-Z]_[a-c]e[g-s][u-z] */
            else if (/* possible Vt : 'identifier' 'literalString' */
            /* no possible signal */
            /* RangeList */
            (/* [xxx] scope */
            'A'/*'\u0041'(65)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
             || (/* single char */
            c == '_'/*'\u005F'(95)*/)
             || (/* [xxx] scope */
            'a'/*'\u0061'(97)*/ <= c && c <= 'c'/*'\u0063'(99)*/)
             || (/* single char */
            c == 'e'/*'\u0065'(101)*/)
             || (/* [xxx] scope */
            'g'/*'\u0067'(103)*/ <= c && c <= 's'/*'\u0073'(115)*/)
             || (/* [xxx] scope */
            'u'/*'\u0075'(117)*/ <= c && c <= 'z'/*'\u007A'(122)*/)) {
                BeginToken(context);
                ExtendToken(context, st.@identifier);
                wrap.currentState = lexicalState67;
            }
            /* user-input condition code */
            /* = */
            else if (/* possible Vt : '==' '=' */
            /* no possible signal */
            /* single char */
            c == '='/*'\u003D'(61)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Equal符);
                wrap.currentState = lexicalState68;
            }
            /* user-input condition code */
            /* % */
            else if (/* possible Vt : '%' '%=' */
            /* no possible signal */
            /* single char */
            c == '%'/*'\u0025'(37)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Percent符);
                wrap.currentState = lexicalState69;
            }
            /* user-input condition code */
            /* \* */
            else if (/* possible Vt : '*' '*=' */
            /* no possible signal */
            /* single char */
            c == '*'/*'\u002A'(42)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Asterisk符);
                wrap.currentState = lexicalState70;
            }
            /* user-input condition code */
            /* ! */
            else if (/* possible Vt : '!' '!=' */
            /* no possible signal */
            /* single char */
            c == '!'/*'\u0021'(33)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Bang符);
                wrap.currentState = lexicalState71;
            }
            /* auto-generated condition code */
            /* f */
            else if (/* possible Vt : 'identifier' 'literalString' 'boolConstant' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'f'/*'\u0066'(102)*/) {
                BeginToken(context);
                ExtendToken(context, st.@identifier);
                wrap.currentState = lexicalState72;
            }
            /* auto-generated condition code */
            /* t */
            else if (/* possible Vt : 'identifier' 'literalString' 'boolConstant' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 't'/*'\u0074'(116)*/) {
                BeginToken(context);
                ExtendToken(context, st.@identifier);
                wrap.currentState = lexicalState73;
            }
            /* auto-generated condition code */
            /* d */
            else if (/* possible Vt : 'defined' 'identifier' 'literalString' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'd'/*'\u0064'(100)*/) {
                BeginToken(context);
                ExtendToken(context, st.@identifier);
                wrap.currentState = lexicalState74;
            }
            /* user-input condition code */
            /* \| */
            else if (/* possible Vt : '|' '||' '|=' */
            /* no possible signal */
            /* single char */
            c == '|'/*'\u007C'(124)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Pipe符);
                wrap.currentState = lexicalState75;
            }
            /* user-input condition code */
            /* ^ */
            else if (/* possible Vt : '^' '^^' '^=' */
            /* no possible signal */
            /* single char */
            c == '^'/*'\u005E'(94)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Caret符);
                wrap.currentState = lexicalState76;
            }
            /* user-input condition code */
            /* & */
            else if (/* possible Vt : '&' '&&' '&=' */
            /* no possible signal */
            /* single char */
            c == '&'/*'\u0026'(38)*/) {
                BeginToken(context);
                ExtendToken(context, st.@And符);
                wrap.currentState = lexicalState77;
            }
            /* user-input condition code */
            /* > */
            else if (/* possible Vt : '>>' '>' '>=' '>>=' */
            /* no possible signal */
            /* single char */
            c == '>'/*'\u003E'(62)*/) {
                BeginToken(context);
                ExtendToken(context, st.@RightAngle符);
                wrap.currentState = lexicalState78;
            }
            /* user-input condition code */
            /* \< */
            else if (/* possible Vt : '<<' '<' '<=' '<<=' */
            /* no possible signal */
            /* single char */
            c == '<'/*'\u003C'(60)*/) {
                BeginToken(context);
                ExtendToken(context, st.@LeftAngle符);
                wrap.currentState = lexicalState79;
            }
            /* user-input condition code */
            /* \/ */
            else if (/* possible Vt : '/' '/=' 'inlineComment' */
            /* no possible signal */
            /* 'inlineComment' : comment ignores 'validScopeChars'([\u0001-\uFFFF]) and 'validGlobalChars'([\u0001-\uFFFF]) */
            c == '/'/*'\u002F'(47)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Slash符);
                wrap.currentState = lexicalState80;
            }
            /* auto-generated condition code */
            /* [1-9] */
            else if (/* possible Vt : 'number' 'intConstant' 'uintConstant' 'floatConstant' 'doubleConstant' */
            /* no possible signal */
            /* RangeList */
            /* [xxx] scope */
            '1'/*'\u0031'(49)*/ <= c && c <= '9'/*'\u0039'(57)*/) {
                BeginToken(context);
                ExtendToken(context, st.@number, st.@intConstant, st.@doubleConstant);
                wrap.currentState = lexicalState81;
            }
            /* auto-generated condition code */
            /* 0 */
            else if (/* possible Vt : 'number' 'intConstant' 'uintConstant' 'floatConstant' 'doubleConstant' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == '0'/*'\u0030'(48)*/) {
                BeginToken(context);
                ExtendToken(context, st.@number, st.@intConstant, st.@doubleConstant);
                wrap.currentState = lexicalState82;
            }
            /* auto-generated condition code */
            /* - */
            else if (/* possible Vt : '--' '-' '-=' 'intConstant' 'uintConstant' 'floatConstant' 'doubleConstant' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == '-'/*'\u002D'(45)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Dash符);
                wrap.currentState = lexicalState83;
            }
            /* auto-generated condition code */
            /* \+ */
            else if (/* possible Vt : '++' '+' '+=' 'intConstant' 'uintConstant' 'floatConstant' 'doubleConstant' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == '+'/*'\u002B'(43)*/) {
                BeginToken(context);
                ExtendToken(context, st.@Plus符);
                wrap.currentState = lexicalState84;
            }
            /* user-input condition code */
            /* # */
            else if (/* possible Vt : '#define' '#undef' '##' '#if' '#ifdef' '#ifndef' '#else' '#elif' '#endif' '#error' '#pragma' '#extension' '#version' '#line' */
            /* no possible signal */
            /* single char */
            c == '#'/*'\u0023'(35)*/) {
                BeginToken(context);
                wrap.currentState = lexicalState2;
            }
            /* deal with everything else. */
            else if (c == ' ' || c == '\r' || c == '\n' || c == '\t' || c == '\0') {
                wrap.currentState = lexicalState0; // skip them.
            }
            else { // unexpected char.
                BeginToken(context);
                ExtendToken(context);
                AcceptToken(st.Error错, context);
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

