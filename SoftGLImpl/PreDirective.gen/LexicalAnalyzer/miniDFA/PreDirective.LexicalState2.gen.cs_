using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.PreDirectiveFormat {
    partial class CompilerPreDirective {

#if noTableDFA
        /// <summary>
        /// lexicalState2
        /// <para>CompilerPreDirective.Lexical●[1 DFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState2 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* user-input condition code */
            /* l */
            else if (/* possible Vt : '#line' */
            /* no possible signal */
            /* single char */
            c == 'l'/*'\u006C'(108)*/) {
                wrap.currentState = lexicalState6;
            }
            /* user-input condition code */
            /* v */
            else if (/* possible Vt : '#version' */
            /* no possible signal */
            /* single char */
            c == 'v'/*'\u0076'(118)*/) {
                wrap.currentState = lexicalState11;
            }
            /* user-input condition code */
            /* p */
            else if (/* possible Vt : '#pragma' */
            /* no possible signal */
            /* single char */
            c == 'p'/*'\u0070'(112)*/) {
                wrap.currentState = lexicalState17;
            }
            /* user-input condition code */
            /* # */
            else if (/* possible Vt : '##' */
            /* no possible signal */
            /* single char */
            c == '#'/*'\u0023'(35)*/) {
                ExtendToken(context, st.@Pound符Pound符);
                wrap.currentState = lexicalState114;
            }
            /* user-input condition code */
            /* u */
            else if (/* possible Vt : '#undef' */
            /* no possible signal */
            /* single char */
            c == 'u'/*'\u0075'(117)*/) {
                wrap.currentState = lexicalState20;
            }
            /* user-input condition code */
            /* d */
            else if (/* possible Vt : '#define' */
            /* no possible signal */
            /* single char */
            c == 'd'/*'\u0064'(100)*/) {
                wrap.currentState = lexicalState12;
            }
            /* user-input condition code */
            /* i */
            else if (/* possible Vt : '#if' '#ifdef' '#ifndef' */
            /* no possible signal */
            /* single char */
            c == 'i'/*'\u0069'(105)*/) {
                wrap.currentState = lexicalState24;
            }
            /* user-input condition code */
            /* e */
            else if (/* possible Vt : '#else' '#elif' '#endif' '#error' '#extension' */
            /* no possible signal */
            /* single char */
            c == 'e'/*'\u0065'(101)*/) {
                wrap.currentState = lexicalState25;
            }
            /* deal with everything else. */
            else { // token with error type
                ExtendToken(context);
                AcceptToken(st.Error错, context);
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

