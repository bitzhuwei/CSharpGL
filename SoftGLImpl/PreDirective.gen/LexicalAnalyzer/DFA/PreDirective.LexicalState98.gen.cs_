using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.PreDirectiveFormat {
    partial class CompilerPreDirective {

#if noTableDFA
        /// <summary>
        /// lexicalState98
        /// <para>CompilerPreDirective.Lexical●[2 NFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState98 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* user-input condition code */
            /* [^a-zA-Z0-9_] */
            else if (/* possible Vt : 'boolConstant' */
            /* no possible signal */
            /* [^xxx] scope */
            (!(('a'/*'\u0061'(97)*/ <= c && c <= 'z'/*'\u007A'(122)*/)
            || ('A'/*'\u0041'(65)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
            || ('0'/*'\u0030'(48)*/ <= c && c <= '9'/*'\u0039'(57)*/)
            || (c == '_'/*'\u005F'(95)*/)))
            /* [^xxx] scope must be with scope restrict */
             && ('\u0001'/*(1)*/ <= c && c <= '\uFFFF'/*￿(65535)*/)
            /* [^xxx] scope with global restrict */
             && ('\u0001'/*(1)*/ <= c && c <= '\uFFFF'/*￿(65535)*/)) {
                wrap.currentState = lexicalState118;
            }
            /* user-input condition code */
            /* [a-zA-Z0-9_] */
            else if (/* possible Vt : 'identifier' */
            /* no possible signal */
            /* [xxx] scope */
            ('a'/*'\u0061'(97)*/ <= c && c <= 'z'/*'\u007A'(122)*/)
            || ('A'/*'\u0041'(65)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
            || ('0'/*'\u0030'(48)*/ <= c && c <= '9'/*'\u0039'(57)*/)
            || (c == '_'/*'\u005F'(95)*/)) {
                ExtendToken(context, st.@identifier);
                wrap.currentState = lexicalState36;
            }
            /* deal with everything else. */
            else {
                AcceptToken(st.@identifier, context);
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

