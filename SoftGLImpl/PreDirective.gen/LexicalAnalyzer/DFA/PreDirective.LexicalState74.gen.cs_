using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.PreDirectiveFormat {
    partial class CompilerPreDirective {

#if noTableDFA
        /// <summary>
        /// lexicalState74
        /// <para>CompilerPreDirective.Lexical●[1 NFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState74 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* user-input condition code */
            /* " */
            else if (/* possible Vt : 'literalString' */
            /* no possible signal */
            /* single char */
            c == '"'/*'\u0022'(34)*/) {
                ExtendToken(context, st.@literalString);
                wrap.currentState = lexicalState33;
            }
            /* user-input condition code */
            /* [^\\"] */
            else if (/* possible Vt : 'literalString' */
            /* no possible signal */
            /* [^xxx] scope */
            (!((c == '\\'/*'\u005C'(92)*/)
            || (c == '"'/*'\u0022'(34)*/)))
            /* [^xxx] scope must be with scope restrict */
             && ('\u0001'/*(1)*/ <= c && c <= '\uFFFF'/*￿(65535)*/)
            /* [^xxx] scope with global restrict */
             && ('\u0001'/*(1)*/ <= c && c <= '\uFFFF'/*￿(65535)*/)) {
                wrap.currentState = lexicalState34;
            }
            /* user-input condition code */
            /* \\ */
            else if (/* possible Vt : 'literalString' */
            /* no possible signal */
            /* single char */
            c == '\\'/*'\u005C'(92)*/) {
                wrap.currentState = lexicalState35;
            }
            /* deal with everything else. */
            else { // token with error type
                ExtendToken(context);
                AcceptToken(st.Error错, context);
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

