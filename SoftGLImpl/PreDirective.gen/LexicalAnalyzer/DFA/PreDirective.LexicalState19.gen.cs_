using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.PreDirectiveFormat {
    partial class CompilerPreDirective {

#if noTableDFA
        /// <summary>
        /// lexicalState19
        /// <para>CompilerPreDirective.Lexical‚óè[3 NFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState19 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* user-input condition code */
            /* " */
            else if (/* possible Vt : 'literalString' */
            /* no possible signal */
            /* single char */
            c == '"'/*'\u0022'(34)*/) {
                BeginToken(context);
                wrap.currentState = lexicalState1;
            }
            /* auto-generated condition code */
            /* [0-9][A-Z]_[b-z] */
            else if (/* possible Vt : 'identifier' */
            /* no possible signal */
            /* RangeList */
            (/* [xxx] scope */
            '0'/*'\u0030'(48)*/ <= c && c <= '9'/*'\u0039'(57)*/)
             || (/* [xxx] scope */
            'A'/*'\u0041'(65)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
             || (/* single char */
            c == '_'/*'\u005F'(95)*/)
             || (/* [xxx] scope */
            'b'/*'\u0062'(98)*/ <= c && c <= 'z'/*'\u007A'(122)*/)) {
                ExtendToken(context, st.@identifier);
                wrap.currentState = lexicalState36;
            }
            /* auto-generated condition code */
            /* a */
            else if (/* possible Vt : 'identifier' 'boolConstant' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'a'/*'\u0061'(97)*/) {
                ExtendToken(context, st.@identifier);
                wrap.currentState = lexicalState41;
            }
            /* deal with everything else. */
            else {
                AcceptToken(st.@identifier, context);
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

