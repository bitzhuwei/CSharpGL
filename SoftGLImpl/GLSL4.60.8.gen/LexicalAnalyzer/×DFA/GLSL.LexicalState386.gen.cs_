using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.GLSLFormat {
    partial class CompilerGLSL {

#if noTableDFA
        /// <summary>
        /// lexicalState386
        /// <para>CompilerGLSL.Lexical●[21 NFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState386 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* auto-generated condition code */
            /* 0[4-9]A[D-Z]_[a-z] */
            else if (/* possible Vt : 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            (/* single char */
            c == '0'/*'\u0030'(48)*/)
             || (/* [xxx] scope */
            '4'/*'\u0034'(52)*/ <= c && c <= '9'/*'\u0039'(57)*/)
             || (/* single char */
            c == 'A'/*'\u0041'(65)*/)
             || (/* [xxx] scope */
            'D'/*'\u0044'(68)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
             || (/* single char */
            c == '_'/*'\u005F'(95)*/)
             || (/* [xxx] scope */
            'a'/*'\u0061'(97)*/ <= c && c <= 'z'/*'\u007A'(122)*/)) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState55;
            }
            /* auto-generated condition code */
            /* B */
            else if (/* possible Vt : 'samplerBuffer' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'B'/*'\u0042'(66)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState416;
            }
            /* auto-generated condition code */
            /* 3 */
            else if (/* possible Vt : 'sampler3D' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == '3'/*'\u0033'(51)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState417;
            }
            /* auto-generated condition code */
            /* 1 */
            else if (/* possible Vt : 'sampler1D' 'sampler1DShadow' 'sampler1DArray' 'sampler1DArrayShadow' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == '1'/*'\u0031'(49)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState418;
            }
            /* auto-generated condition code */
            /* C */
            else if (/* possible Vt : 'samplerCube' 'samplerCubeShadow' 'samplerCubeArray' 'samplerCubeArrayShadow' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'C'/*'\u0043'(67)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState419;
            }
            /* auto-generated condition code */
            /* 2 */
            else if (/* possible Vt : 'sampler2D' 'sampler2DShadow' 'sampler2DArray' 'sampler2DArrayShadow' 'sampler2DRect' 'sampler2DRectShadow' 'sampler2DMS' 'sampler2DMSArray' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == '2'/*'\u0032'(50)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState420;
            }
            /* deal with everything else. */
            else {
                AcceptToken2(context
                , new("default", /*<'Vt'>*/st.@struct, st.@type_name)
                , new("subroutine1", /*default preVt*/st.@终, st.@type_name)
                , new("default", /*default preVt*/st.@终, st.@identifier));
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

