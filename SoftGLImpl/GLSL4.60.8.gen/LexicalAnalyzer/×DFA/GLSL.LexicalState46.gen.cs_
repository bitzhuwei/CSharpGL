using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.GLSLFormat {
    partial class CompilerGLSL {

#if noTableDFA
        /// <summary>
        /// lexicalState46
        /// <para>CompilerGLSL.Lexical●[44 NFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState46 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* auto-generated condition code */
            /* [0-9][A-Z]_[a-e][g-h][j-l][o-r][t-u][w-z] */
            else if (/* possible Vt : 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            (/* [xxx] scope */
            '0'/*'\u0030'(48)*/ <= c && c <= '9'/*'\u0039'(57)*/)
             || (/* [xxx] scope */
            'A'/*'\u0041'(65)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
             || (/* single char */
            c == '_'/*'\u005F'(95)*/)
             || (/* [xxx] scope */
            'a'/*'\u0061'(97)*/ <= c && c <= 'e'/*'\u0065'(101)*/)
             || (/* [xxx] scope */
            'g'/*'\u0067'(103)*/ <= c && c <= 'h'/*'\u0068'(104)*/)
             || (/* [xxx] scope */
            'j'/*'\u006A'(106)*/ <= c && c <= 'l'/*'\u006C'(108)*/)
             || (/* [xxx] scope */
            'o'/*'\u006F'(111)*/ <= c && c <= 'r'/*'\u0072'(114)*/)
             || (/* [xxx] scope */
            't'/*'\u0074'(116)*/ <= c && c <= 'u'/*'\u0075'(117)*/)
             || (/* [xxx] scope */
            'w'/*'\u0077'(119)*/ <= c && c <= 'z'/*'\u007A'(122)*/)) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState55;
            }
            /* auto-generated condition code */
            /* f */
            else if (/* possible Vt : 'if' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'f'/*'\u0066'(102)*/) {
                ExtendToken(context, st.@if, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState116;
            }
            /* auto-generated condition code */
            /* v */
            else if (/* possible Vt : 'ivec2' 'ivec3' 'ivec4' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'v'/*'\u0076'(118)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState117;
            }
            /* auto-generated condition code */
            /* n */
            else if (/* possible Vt : 'invariant' 'in' 'inout' 'int' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'n'/*'\u006E'(110)*/) {
                ExtendToken(context, st.@in, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState118;
            }
            /* auto-generated condition code */
            /* i */
            else if (/* possible Vt : 'iimage2D' 'iimage3D' 'iimageCube' 'iimageBuffer' 'iimage1D' 'iimage1DArray' 'iimage2DRect' 'iimage2DArray' 'iimageCubeArray' 'iimage2DMS' 'iimage2DMSArray' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'i'/*'\u0069'(105)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState119;
            }
            /* auto-generated condition code */
            /* m */
            else if (/* possible Vt : 'image2D' 'image3D' 'imageCube' 'imageBuffer' 'image1D' 'image1DArray' 'image2DRect' 'image2DArray' 'imageCubeArray' 'image2DMS' 'image2DMSArray' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'm'/*'\u006D'(109)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState120;
            }
            /* auto-generated condition code */
            /* s */
            else if (/* possible Vt : 'isampler2D' 'isampler3D' 'isamplerCube' 'isampler2DArray' 'isamplerCubeArray' 'isampler1D' 'isampler1DArray' 'isampler2DRect' 'isamplerBuffer' 'isampler2DMS' 'isampler2DMSArray' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 's'/*'\u0073'(115)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState121;
            }
            /* deal with everything else. */
            else {
                AcceptToken2(context
                , new("default", /*<'Vt'>*/st.@struct, st.@type_name)
                , new("subroutine1", /*default preVt*/st.@终, st.@type_name)
                , new("default", /*default preVt*/st.@终, st.@identifier));
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

