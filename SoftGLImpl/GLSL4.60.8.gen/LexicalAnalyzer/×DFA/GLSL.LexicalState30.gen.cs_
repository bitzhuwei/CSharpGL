using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.GLSLFormat {
    partial class CompilerGLSL {

#if noTableDFA
        /// <summary>
        /// lexicalState30
        /// <para>CompilerGLSL.Lexical●[4 NFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState30 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* user-input condition code */
            /* \/ */
            else if (/* possible Vt : 'inlineComment' */
            /* no possible signal */
            /* 'inlineComment' : comment ignores 'validScopeChars'([\u0001-\uFFFF]) and 'validGlobalChars'([\u0001-\uFFFF]) */
            c == '/'/*'\u002F'(47)*/) {
                ExtendToken(context, st.@inlineComment行);
                wrap.currentState = lexicalState72;
            }
            /* user-input condition code */
            /* \* */
            else if (/* possible Vt : 'blockComment' */
            /* no possible signal */
            /* 'blockComment' : comment ignores 'validScopeChars'([\u0001-\uFFFF]) and 'validGlobalChars'([\u0001-\uFFFF]) */
            c == '*'/*'\u002A'(42)*/) {
                wrap.currentState = lexicalState73;
            }
            /* user-input condition code */
            /* = */
            else if (/* possible Vt : '/=' */
            /* no possible signal */
            /* single char */
            c == '='/*'\u003D'(61)*/) {
                ExtendToken(context, st.@Slash符Equal符);
                wrap.currentState = lexicalState74;
            }
            /* deal with everything else. */
            else {
                AcceptToken(st.@Slash符, context);
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

