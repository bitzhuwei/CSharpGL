using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.GLSLFormat {
    partial class CompilerGLSL {

#if noTableDFA
        /// <summary>
        /// lexicalState527
        /// <para>CompilerGLSL.Lexical●[1 DFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState527 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* auto-generated condition code */
            /* [0-9][B-R][T-Z]_[a-z] */
            else if (/* possible Vt : 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            (/* [xxx] scope */
            '0'/*'\u0030'(48)*/ <= c && c <= '9'/*'\u0039'(57)*/)
             || (/* [xxx] scope */
            'B'/*'\u0042'(66)*/ <= c && c <= 'R'/*'\u0052'(82)*/)
             || (/* [xxx] scope */
            'T'/*'\u0054'(84)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
             || (/* single char */
            c == '_'/*'\u005F'(95)*/)
             || (/* [xxx] scope */
            'a'/*'\u0061'(97)*/ <= c && c <= 'z'/*'\u007A'(122)*/)) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState61;
            }
            /* auto-generated condition code */
            /* S */
            else if (/* possible Vt : 'samplerCubeShadow' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'S'/*'\u0053'(83)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState566;
            }
            /* auto-generated condition code */
            /* A */
            else if (/* possible Vt : 'samplerCubeArray' 'samplerCubeArrayShadow' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'A'/*'\u0041'(65)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState567;
            }
            /* deal with everything else. */
            else {
                AcceptToken2(context
                , new("default", /*<'Vt'>*/st.@struct, st.@type_name)
                , new("default", /*default preVt*/st.@终, st.@samplerCube)
                , new("subroutine1", /*default preVt*/st.@终, st.@type_name)
                , new("default", /*default preVt*/st.@终, st.@identifier));
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

