using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.GLSLFormat {
    partial class CompilerGLSL {

#if noTableDFA
        /// <summary>
        /// lexicalState52
        /// <para>CompilerGLSL.Lexical●[1 DFA States]</para>
        /// </summary>
        private static readonly Action<LexicalContext, char, CurrentStateWrap> lexicalState52 =
        static (context, c, wrap) => {
            if (false) { /* for simpler code generation purpose. */ }
            /* auto-generated condition code */
            /* [0-9][A-Z]_[b-g][i-l][n-s]v[x-z] */
            else if (/* possible Vt : 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            (/* [xxx] scope */
            '0'/*'\u0030'(48)*/ <= c && c <= '9'/*'\u0039'(57)*/)
             || (/* [xxx] scope */
            'A'/*'\u0041'(65)*/ <= c && c <= 'Z'/*'\u005A'(90)*/)
             || (/* single char */
            c == '_'/*'\u005F'(95)*/)
             || (/* [xxx] scope */
            'b'/*'\u0062'(98)*/ <= c && c <= 'g'/*'\u0067'(103)*/)
             || (/* [xxx] scope */
            'i'/*'\u0069'(105)*/ <= c && c <= 'l'/*'\u006C'(108)*/)
             || (/* [xxx] scope */
            'n'/*'\u006E'(110)*/ <= c && c <= 's'/*'\u0073'(115)*/)
             || (/* single char */
            c == 'v'/*'\u0076'(118)*/)
             || (/* [xxx] scope */
            'x'/*'\u0078'(120)*/ <= c && c <= 'z'/*'\u007A'(122)*/)) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState61;
            }
            /* auto-generated condition code */
            /* u */
            else if (/* possible Vt : 'type_name' 'subroutine' 'identifier' */
            /* possible signal : subroutine0 */
            /* RangeList */
            /* single char */
            c == 'u'/*'\u0075'(117)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState114;
            }
            /* auto-generated condition code */
            /* w */
            else if (/* possible Vt : 'switch' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'w'/*'\u0077'(119)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState115;
            }
            /* auto-generated condition code */
            /* t */
            else if (/* possible Vt : 'struct' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 't'/*'\u0074'(116)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState116;
            }
            /* auto-generated condition code */
            /* h */
            else if (/* possible Vt : 'shared' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'h'/*'\u0068'(104)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState117;
            }
            /* auto-generated condition code */
            /* m */
            else if (/* possible Vt : 'smooth' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'm'/*'\u006D'(109)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState118;
            }
            /* auto-generated condition code */
            /* a */
            else if (/* possible Vt : 'sample' 'sampler2D' 'sampler3D' 'samplerCube' 'sampler2DShadow' 'samplerCubeShadow' 'sampler2DArray' 'sampler2DArrayShadow' 'samplerCubeArray' 'samplerCubeArrayShadow' 'sampler1D' 'sampler1DShadow' 'sampler1DArray' 'sampler1DArrayShadow' 'sampler2DRect' 'sampler2DRectShadow' 'samplerBuffer' 'sampler2DMS' 'sampler2DMSArray' 'type_name' 'identifier' */
            /* no possible signal */
            /* RangeList */
            /* single char */
            c == 'a'/*'\u0061'(97)*/) {
                ExtendToken(context, st.@type_name, st.@type_name, st.@identifier);
                wrap.currentState = lexicalState119;
            }
            /* deal with everything else. */
            else {
                AcceptToken2(context
                , new("default", /*<'Vt'>*/st.@struct, st.@type_name)
                , new("subroutine1", /*default preVt*/st.@终, st.@type_name)
                , new("default", /*default preVt*/st.@终, st.@identifier));
                wrap.currentState = lexicalState0;
            }


        };
#endif

    }
}

