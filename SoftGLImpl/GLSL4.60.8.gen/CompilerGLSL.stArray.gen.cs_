using System;
using bitzhuwei.Compiler;

namespace bitzhuwei.GLSLFormat {
    partial class CompilerGLSL {
        // you can remove this file if you don't need it.
        /// <summary>
        /// "sourceCode", // csName = index;
        /// <para>use it like this: stArray[Vt] or stArray[Vn]</para>
        /// <para>stArray[0] is '¥'</para>
        /// </summary>
        public static readonly IReadOnlyList<string> stArray = new string[] {
            "'¥'", // @终 = 0;
            "'blockComment'", // @blockComment块 = 1;
            "'inlineComment'", // @inlineComment行 = 2;
            "';'", // @Semicolon符 = 3;
            "'identifier'", // @identifier = 4;
            "'intConstant'", // @intConstant = 5;
            "'uintConstant'", // @uintConstant = 6;
            "'floatConstant'", // @floatConstant = 7;
            "'boolConstant'", // @boolConstant = 8;
            "'doubleConstant'", // @doubleConstant = 9;
            "'('", // @LeftParenthesis符 = 10;
            "')'", // @RightParenthesis符 = 11;
            "'['", // @LeftBracket符 = 12;
            "']'", // @RightBracket符 = 13;
            "'.'", // @Dot符 = 14;
            "'++'", // @Plus符Plus符 = 15;
            "'--'", // @Dash符Dash符 = 16;
            "'void'", // @void = 17;
            "','", // @Comma符 = 18;
            "'+'", // @Plus符 = 19;
            "'-'", // @Dash符 = 20;
            "'!'", // @Bang符 = 21;
            "'~'", // @Tilde符 = 22;
            "'*'", // @Asterisk符 = 23;
            "'/'", // @Slash符 = 24;
            "'%'", // @Percent符 = 25;
            "'<<'", // @LeftAngle符LeftAngle符 = 26;
            "'>>'", // @RightAngle符RightAngle符 = 27;
            "'<'", // @LeftAngle符 = 28;
            "'>'", // @RightAngle符 = 29;
            "'<='", // @LeftAngle符Equal符 = 30;
            "'>='", // @RightAngle符Equal符 = 31;
            "'=='", // @Equal符Equal符 = 32;
            "'!='", // @Bang符Equal符 = 33;
            "'&'", // @And符 = 34;
            "'^'", // @Caret符 = 35;
            "'|'", // @Pipe符 = 36;
            "'&&'", // @And符And符 = 37;
            "'^^'", // @Caret符Caret符 = 38;
            "'||'", // @Pipe符Pipe符 = 39;
            "'?'", // @Question符 = 40;
            "':'", // @Colon符 = 41;
            "'='", // @Equal符 = 42;
            "'*='", // @Asterisk符Equal符 = 43;
            "'/='", // @Slash符Equal符 = 44;
            "'%='", // @Percent符Equal符 = 45;
            "'+='", // @Plus符Equal符 = 46;
            "'-='", // @Dash符Equal符 = 47;
            "'<<='", // @LeftAngle符LeftAngle符Equal符 = 48;
            "'>>='", // @RightAngle符RightAngle符Equal符 = 49;
            "'&='", // @And符Equal符 = 50;
            "'^='", // @Caret符Equal符 = 51;
            "'|='", // @Pipe符Equal符 = 52;
            "'precision'", // @precision = 53;
            "'{'", // @LeftBrace符 = 54;
            "'}'", // @RightBrace符 = 55;
            "'invariant'", // @invariant = 56;
            "'smooth'", // @smooth = 57;
            "'flat'", // @flat = 58;
            "'noperspective'", // @noperspective = 59;
            "'layout'", // @layout = 60;
            "'shared'", // @shared = 61;
            "'precise'", // @precise = 62;
            "'const'", // @const = 63;
            "'in'", // @in = 64;
            "'out'", // @out = 65;
            "'inout'", // @inout = 66;
            "'centroid'", // @centroid = 67;
            "'patch'", // @patch = 68;
            "'sample'", // @sample = 69;
            "'uniform'", // @uniform = 70;
            "'buffer'", // @buffer = 71;
            "'coherent'", // @coherent = 72;
            "'volatile'", // @volatile = 73;
            "'restrict'", // @restrict = 74;
            "'readonly'", // @readonly = 75;
            "'writeonly'", // @writeonly = 76;
            "'subroutine'", // @subroutine = 77;
            "'type_name'", // @type_name = 78;
            "'float'", // @float = 79;
            "'double'", // @double = 80;
            "'int'", // @int = 81;
            "'uint'", // @uint = 82;
            "'bool'", // @bool = 83;
            "'vec2'", // @vec2 = 84;
            "'vec3'", // @vec3 = 85;
            "'vec4'", // @vec4 = 86;
            "'dvec2'", // @dvec2 = 87;
            "'dvec3'", // @dvec3 = 88;
            "'dvec4'", // @dvec4 = 89;
            "'bvec2'", // @bvec2 = 90;
            "'bvec3'", // @bvec3 = 91;
            "'bvec4'", // @bvec4 = 92;
            "'ivec2'", // @ivec2 = 93;
            "'ivec3'", // @ivec3 = 94;
            "'ivec4'", // @ivec4 = 95;
            "'uvec2'", // @uvec2 = 96;
            "'uvec3'", // @uvec3 = 97;
            "'uvec4'", // @uvec4 = 98;
            "'mat2'", // @mat2 = 99;
            "'mat3'", // @mat3 = 100;
            "'mat4'", // @mat4 = 101;
            "'mat2x2'", // @mat2x2 = 102;
            "'mat2x3'", // @mat2x3 = 103;
            "'mat2x4'", // @mat2x4 = 104;
            "'mat3x2'", // @mat3x2 = 105;
            "'mat3x3'", // @mat3x3 = 106;
            "'mat3x4'", // @mat3x4 = 107;
            "'mat4x2'", // @mat4x2 = 108;
            "'mat4x3'", // @mat4x3 = 109;
            "'mat4x4'", // @mat4x4 = 110;
            "'dmat2'", // @dmat2 = 111;
            "'dmat3'", // @dmat3 = 112;
            "'dmat4'", // @dmat4 = 113;
            "'dmat2x2'", // @dmat2x2 = 114;
            "'dmat2x3'", // @dmat2x3 = 115;
            "'dmat2x4'", // @dmat2x4 = 116;
            "'dmat3x2'", // @dmat3x2 = 117;
            "'dmat3x3'", // @dmat3x3 = 118;
            "'dmat3x4'", // @dmat3x4 = 119;
            "'dmat4x2'", // @dmat4x2 = 120;
            "'dmat4x3'", // @dmat4x3 = 121;
            "'dmat4x4'", // @dmat4x4 = 122;
            "'atomic_uint'", // @atomic_uint = 123;
            "'sampler2D'", // @sampler2D = 124;
            "'sampler3D'", // @sampler3D = 125;
            "'samplerCube'", // @samplerCube = 126;
            "'sampler2DShadow'", // @sampler2DShadow = 127;
            "'samplerCubeShadow'", // @samplerCubeShadow = 128;
            "'sampler2DArray'", // @sampler2DArray = 129;
            "'sampler2DArrayShadow'", // @sampler2DArrayShadow = 130;
            "'samplerCubeArray'", // @samplerCubeArray = 131;
            "'samplerCubeArrayShadow'", // @samplerCubeArrayShadow = 132;
            "'isampler2D'", // @isampler2D = 133;
            "'isampler3D'", // @isampler3D = 134;
            "'isamplerCube'", // @isamplerCube = 135;
            "'isampler2DArray'", // @isampler2DArray = 136;
            "'isamplerCubeArray'", // @isamplerCubeArray = 137;
            "'usampler2D'", // @usampler2D = 138;
            "'usampler3D'", // @usampler3D = 139;
            "'usamplerCube'", // @usamplerCube = 140;
            "'usampler2DArray'", // @usampler2DArray = 141;
            "'usamplerCubeArray'", // @usamplerCubeArray = 142;
            "'sampler1D'", // @sampler1D = 143;
            "'sampler1DShadow'", // @sampler1DShadow = 144;
            "'sampler1DArray'", // @sampler1DArray = 145;
            "'sampler1DArrayShadow'", // @sampler1DArrayShadow = 146;
            "'isampler1D'", // @isampler1D = 147;
            "'isampler1DArray'", // @isampler1DArray = 148;
            "'usampler1D'", // @usampler1D = 149;
            "'usampler1DArray'", // @usampler1DArray = 150;
            "'sampler2DRect'", // @sampler2DRect = 151;
            "'sampler2DRectShadow'", // @sampler2DRectShadow = 152;
            "'isampler2DRect'", // @isampler2DRect = 153;
            "'usampler2DRect'", // @usampler2DRect = 154;
            "'samplerBuffer'", // @samplerBuffer = 155;
            "'isamplerBuffer'", // @isamplerBuffer = 156;
            "'usamplerBuffer'", // @usamplerBuffer = 157;
            "'sampler2DMS'", // @sampler2DMS = 158;
            "'isampler2DMS'", // @isampler2DMS = 159;
            "'usampler2DMS'", // @usampler2DMS = 160;
            "'sampler2DMSArray'", // @sampler2DMSArray = 161;
            "'isampler2DMSArray'", // @isampler2DMSArray = 162;
            "'usampler2DMSArray'", // @usampler2DMSArray = 163;
            "'image2D'", // @image2D = 164;
            "'iimage2D'", // @iimage2D = 165;
            "'uimage2D'", // @uimage2D = 166;
            "'image3D'", // @image3D = 167;
            "'iimage3D'", // @iimage3D = 168;
            "'uimage3D'", // @uimage3D = 169;
            "'imageCube'", // @imageCube = 170;
            "'iimageCube'", // @iimageCube = 171;
            "'uimageCube'", // @uimageCube = 172;
            "'imageBuffer'", // @imageBuffer = 173;
            "'iimageBuffer'", // @iimageBuffer = 174;
            "'uimageBuffer'", // @uimageBuffer = 175;
            "'image1D'", // @image1D = 176;
            "'iimage1D'", // @iimage1D = 177;
            "'uimage1D'", // @uimage1D = 178;
            "'image1DArray'", // @image1DArray = 179;
            "'iimage1DArray'", // @iimage1DArray = 180;
            "'uimage1DArray'", // @uimage1DArray = 181;
            "'image2DRect'", // @image2DRect = 182;
            "'iimage2DRect'", // @iimage2DRect = 183;
            "'uimage2DRect'", // @uimage2DRect = 184;
            "'image2DArray'", // @image2DArray = 185;
            "'iimage2DArray'", // @iimage2DArray = 186;
            "'uimage2DArray'", // @uimage2DArray = 187;
            "'imageCubeArray'", // @imageCubeArray = 188;
            "'iimageCubeArray'", // @iimageCubeArray = 189;
            "'uimageCubeArray'", // @uimageCubeArray = 190;
            "'image2DMS'", // @image2DMS = 191;
            "'iimage2DMS'", // @iimage2DMS = 192;
            "'uimage2DMS'", // @uimage2DMS = 193;
            "'image2DMSArray'", // @image2DMSArray = 194;
            "'iimage2DMSArray'", // @iimage2DMSArray = 195;
            "'uimage2DMSArray'", // @uimage2DMSArray = 196;
            "'highp'", // @highp = 197;
            "'mediump'", // @mediump = 198;
            "'lowp'", // @lowp = 199;
            "'struct'", // @struct = 200;
            "'if'", // @if = 201;
            "'else'", // @else = 202;
            "'switch'", // @switch = 203;
            "'case'", // @case = 204;
            "'default'", // @default = 205;
            "'while'", // @while = 206;
            "'do'", // @do = 207;
            "'for'", // @for = 208;
            "'continue'", // @continue = 209;
            "'break'", // @break = 210;
            "'return'", // @return = 211;
            "'discard'", // @discard = 212;
            // end of ('¥' + 212 Vt)

            "translation_unit", // translation_unit枝 = 213;
            "external_declaration", // external_declaration枝 = 214;
            "function_definition", // function_definition枝 = 215;
            "variable_identifier", // variable_identifier枝 = 216;
            "primary_expression", // primary_expression枝 = 217;
            "postfix_expression", // postfix_expression枝 = 218;
            "integer_expression", // integer_expression枝 = 219;
            "function_call", // function_call枝 = 220;
            "function_call_or_method", // function_call_or_method枝 = 221;
            "function_call_generic", // function_call_generic枝 = 222;
            "function_call_header_no_parameters", // function_call_header_no_parameters枝 = 223;
            "function_call_header_with_parameters", // function_call_header_with_parameters枝 = 224;
            "function_call_header", // function_call_header枝 = 225;
            "function_identifier", // function_identifier枝 = 226;
            "unary_expression", // unary_expression枝 = 227;
            "unary_operator", // unary_operator枝 = 228;
            "multiplicative_expression", // multiplicative_expression枝 = 229;
            "additive_expression", // additive_expression枝 = 230;
            "shift_expression", // shift_expression枝 = 231;
            "relational_expression", // relational_expression枝 = 232;
            "equality_expression", // equality_expression枝 = 233;
            "and_expression", // and_expression枝 = 234;
            "exclusive_or_expression", // exclusive_or_expression枝 = 235;
            "inclusive_or_expression", // inclusive_or_expression枝 = 236;
            "logical_and_expression", // logical_and_expression枝 = 237;
            "logical_xor_expression", // logical_xor_expression枝 = 238;
            "logical_or_expression", // logical_or_expression枝 = 239;
            "conditional_expression", // conditional_expression枝 = 240;
            "assignment_expression", // assignment_expression枝 = 241;
            "assignment_operator", // assignment_operator枝 = 242;
            "expression", // expression枝 = 243;
            "constant_expression", // constant_expression枝 = 244;
            "declaration", // declaration枝 = 245;
            "identifier_list", // identifier_list枝 = 246;
            "function_prototype", // function_prototype枝 = 247;
            "function_declarator", // function_declarator枝 = 248;
            "function_header_with_parameters", // function_header_with_parameters枝 = 249;
            "function_header", // function_header枝 = 250;
            "parameter_declarator", // parameter_declarator枝 = 251;
            "parameter_declaration", // parameter_declaration枝 = 252;
            "parameter_type_specifier", // parameter_type_specifier枝 = 253;
            "init_declarator_list", // init_declarator_list枝 = 254;
            "single_declaration", // single_declaration枝 = 255;
            "fully_specified_type", // fully_specified_type枝 = 256;
            "invariant_qualifier", // invariant_qualifier枝 = 257;
            "interpolation_qualifier", // interpolation_qualifier枝 = 258;
            "layout_qualifier", // layout_qualifier枝 = 259;
            "layout_qualifier_id_list", // layout_qualifier_id_list枝 = 260;
            "layout_qualifier_id", // layout_qualifier_id枝 = 261;
            "precise_qualifier", // precise_qualifier枝 = 262;
            "type_qualifier", // type_qualifier枝 = 263;
            "single_type_qualifier", // single_type_qualifier枝 = 264;
            "storage_qualifier", // storage_qualifier枝 = 265;
            "type_name_list", // type_name_list枝 = 266;
            "type_specifier", // type_specifier枝 = 267;
            "array_specifier", // array_specifier枝 = 268;
            "type_specifier_nonarray", // type_specifier_nonarray枝 = 269;
            "precision_qualifier", // precision_qualifier枝 = 270;
            "struct_specifier", // struct_specifier枝 = 271;
            "struct_declaration_list", // struct_declaration_list枝 = 272;
            "struct_declaration", // struct_declaration枝 = 273;
            "struct_declarator_list", // struct_declarator_list枝 = 274;
            "struct_declarator", // struct_declarator枝 = 275;
            "initializer", // initializer枝 = 276;
            "initializer_list", // initializer_list枝 = 277;
            "declaration_statement", // declaration_statement枝 = 278;
            "statement", // statement枝 = 279;
            "simple_statement", // simple_statement枝 = 280;
            "compound_statement", // compound_statement枝 = 281;
            "statement_list", // statement_list枝 = 282;
            "expression_statement", // expression_statement枝 = 283;
            "selection_statement", // selection_statement枝 = 284;
            "selection_rest_statement", // selection_rest_statement枝 = 285;
            "condition", // condition枝 = 286;
            "switch_statement", // switch_statement枝 = 287;
            "switch_statement_list", // switch_statement_list枝 = 288;
            "case_label", // case_label枝 = 289;
            "iteration_statement", // iteration_statement枝 = 290;
            "for_init_statement", // for_init_statement枝 = 291;
            "conditionopt", // conditionopt枝 = 292;
            "for_rest_statement", // for_rest_statement枝 = 293;
            "jump_statement", // jump_statement枝 = 294;
            // end of 82 Vn

        };
    }
}
