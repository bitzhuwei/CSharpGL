using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SoftGLImpl {
    partial class GLProgram {
        /// <summary>
        /// name generated by glCreateProgram().
        /// </summary>
        public uint Id { get; private set; }

        internal bool deleteFlag = false;

        /// <summary>
        /// Creates a program object.
        /// </summary>
        /// <param name="id"></param>
        public GLProgram(uint id) {
            this.Id = id;
        }

        /// <summary>
        /// Contains string of vertex shader from user input.
        /// </summary>
        public GLVertexShader? VertexShader { get; private set; }

        /// <summary>
        /// Contains string of geometry shader from user input.
        /// </summary>
        public GLGeometryShader? GeometryShader { get; private set; }

        /// <summary>
        /// Contains string of fragment shader from user input.
        /// </summary>
        public GLFragmentShader? FragmentShader { get; private set; }

        /// <summary>
        /// Contains string of compute shader from user input.
        /// </summary>
        public GLComputeShader? ComputeShader { get; private set; }

        private IList<GLShader> attachedShaders = new List<GLShader>();
        /// <summary>
        /// 
        /// </summary>
        public IList<GLShader> AttachedShaders { get { return this.attachedShaders; } }

        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public override string ToString() {
            return string.Format("ShaderProgram: Id:{0}", this.Id);
        }

        public int GetUniformLocation(string name) {
            int result = -1;
            if (this.logInfo.Length > 0) { return -1; }
            if (this.name2Uniform.TryGetValue(name, out var v)) {
                result = (int)v.variable.location;
            }

            return result;
        }

        public int GetAttribLocation(string name) {
            int result = -1;
            if (this.logInfo.Length > 0) { return -1; }
            var vs = this.VertexShader;
            if (vs != null) {
                result = vs.GetAttribLocation(name);
            }

            return result;
        }

    }
}
